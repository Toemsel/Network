<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Network</name>
    </assembly>
    <members>
        <member name="T:Network.Async.ChickenReceiver">
            <summary>
            Chicken chicken chicken, chicken chicken chicken chicken chicken chicken, <see cref="T:Network.Async.ChickenReceiver"/> chicken chicken chicken chicken.
            </summary>
            <remarks>
            Provides methods for the asynchronous sending and receiving of <see cref="T:Network.Packets.Packet"/> objects across the network.
            </remarks>
        </member>
        <member name="F:Network.Async.ChickenReceiver.packetReceivedEvent">
            <summary>
            A <see cref="T:System.Threading.ManualResetEvent"/> that allows for the instance to wait until the <see cref="T:Network.Packets.ResponsePacket"/> for a sent packet is received.
            </summary>
        </member>
        <member name="M:Network.Async.ChickenReceiver.Send``1(Network.Packets.Packet,Network.Connection)">
            <summary>
            Sends the given <see cref="T:Network.Packets.Packet"/> to the network, via the given <see cref="T:Network.Connection"/> and waits asynchronously for the response, returning it.
            </summary>
            <typeparam name="R">The type of the <see cref="T:Network.Packets.ResponsePacket"/> to wait for.</typeparam>
            <param name="packet">The <see cref="T:Network.Packets.Packet"/> to send to the network.</param>
            <param name="connection">The <see cref="T:Network.Connection"/> that should send the given packet and wait for the response.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation, that promises a <see cref="T:Network.Packets.ResponsePacket"/> of the given type upon completion.
            </returns>
        </member>
        <member name="M:Network.Async.ChickenReceiver.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Network.Attributes.PacketIgnorePropertyAttribute">
            <summary>
            Marks a property to be ignored by a <see cref="T:Network.Converter.IPacketConverter"/>. Its value will not be serialised before being sent, so will be the default
            for its type upon deserialisation.
            </summary>
        </member>
        <member name="T:Network.Attributes.PacketRequestAttribute">
            <summary>
            Maps a request packet to the response packet that handles it. This attribute should be placed on the response packet (must inherit from
            <see cref="T:Network.Packets.ResponsePacket"/>) and the <see cref="T:System.Type"/> of the <see cref="T:Network.Packets.RequestPacket"/> that it handles should be given.
            </summary>
        </member>
        <member name="M:Network.Attributes.PacketRequestAttribute.#ctor(System.Type)">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Network.Attributes.PacketRequestAttribute"/> class with the given <see cref="T:Network.Packets.RequestPacket"/> type as
            the handled <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the <see cref="T:Network.Packets.RequestPacket"/> that the decorated <see cref="T:Network.Packets.ResponsePacket"/> should handle.
            </param>
        </member>
        <member name="P:Network.Attributes.PacketRequestAttribute.RequestType">
            <summary>The <see cref="T:System.Type"/> of the <see cref="T:Network.Packets.RequestPacket"/> that the <see cref="T:Network.Packets.ResponsePacket"/> handles.</summary>
        </member>
        <member name="T:Network.Attributes.PacketTypeAttribute">
            <summary>
            To identify every packet server and client side, a unique identifier is needed. Mark every packet class with this attribute and set a unique id
            (UInt16). 2^16 (65536) unique ids are possible. Double usage of one id will lead to an exception.
            <list type="table">
            <listheader> <description>Following ids are already taken by the network lib:</description> </listheader>
            <item> <term>00</term> <description><see cref="T:Network.Packets.PingRequest"/>               </description>  </item>
            <item> <term>01</term> <description><see cref="T:Network.Packets.PingResponse"/>              </description>  </item>
            <item> <term>02</term> <description><see cref="T:Network.Packets.CloseRequest"/>              </description>  </item>
            <item> <term>03</term> <description><see cref="T:Network.Packets.EstablishUdpRequest"/>       </description>  </item>
            <item> <term>04</term> <description><see cref="T:Network.Packets.EstablishUdpResponse"/>      </description>  </item>
            <item> <term>05</term> <description><see cref="T:Network.Packets.EstablishUdpResponseACK"/>   </description>  </item>
            <item> <term>06</term> <description><see cref="T:Network.Packets.AddPacketTypeRequest"/>      </description>  </item>
            <item> <term>07</term> <description><see cref="T:Network.Packets.AddPacketTypeResponse"/>     </description>  </item>
            <item> <term>08</term> <description><see cref="T:Network.Packets.UDPPingRequest"/>            </description>  </item>
            <item> <term>09</term> <description><see cref="T:Network.Packets.UDPPingResponse"/>           </description>  </item>
            <item> <term>10</term> <description><see cref="T:Network.Packets.RawData"/>                   </description>  </item>
            <item> <term>11</term> <description><see cref="T:Network.Packets.RSA.RSAKeyInformationRequest"/>  </description>  </item>
            <item> <term>12</term> <description><see cref="T:Network.Packets.RSA.RSAKeyInformationResponse"/> </description>  </item>
            </list>
            </summary>
            <remarks>
            Knowledge about the ID isn't essential anymore (Since version 2.0.0.0). However, the above IDs should NOT be overwritten, for compatibility purposes.
            </remarks>
        </member>
        <member name="M:Network.Attributes.PacketTypeAttribute.#ctor(System.UInt16)">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Network.Attributes.PacketTypeAttribute"/> class, with the given ID to be used for the decorated <see cref="T:Network.Packets.Packet"/>.
            </summary>
            <param name="packetType">The ID to use for the decorated <see cref="T:Network.Packets.Packet"/>.</param>
        </member>
        <member name="P:Network.Attributes.PacketTypeAttribute.Id">
            <summary>
            The ID to use for the decorated <see cref="T:Network.Packets.Packet"/>.
            </summary>
        </member>
        <member name="M:Network.BluetoothConnection.#ctor(Network.Bluetooth.DeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.BluetoothConnection"/> class.
            The client would like to establish a connection.
            </summary>
            <param name="deviceInfo">The device information.</param>
        </member>
        <member name="M:Network.BluetoothConnection.#ctor(InTheHand.Net.Sockets.BluetoothClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.BluetoothConnection"/> class.
            The server received a request.
            </summary>
            <param name="bluetoothClient">The bluetooth client.</param>
        </member>
        <member name="M:Network.BluetoothConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Network.BluetoothConnection"/> class.
            </summary>
        </member>
        <member name="M:Network.BluetoothConnection.TryConnect">
            <summary>
            Tries to connect to the endpoint.
            </summary>
            <returns>Task&lt;ConnectionResult&gt;.</returns>
        </member>
        <member name="P:Network.BluetoothConnection.DeviceInfo">
            <summary>
            The device info of the connected device.
            </summary>
        </member>
        <member name="P:Network.BluetoothConnection.Client">
            <summary>
            The bluetooth client connected to.
            </summary>
        </member>
        <member name="P:Network.BluetoothConnection.SignalStrength">
            <summary>
            Gets the signal strength of the paired device.
            </summary>
        </member>
        <member name="P:Network.BluetoothConnection.IsBluetoothSupported">
            <summary>
            Gets if Bluetooth is supported by the current device.
            [True] if Bluetooth is supported. [False] if not.
            </summary>
        </member>
        <member name="T:Network.Bluetooth.DeviceInfo">
            <summary>
            Stores information about a Bluetooth device.
            </summary>
            <remarks>
            This class is only applicable if the build is for the .NET Framework 4.6. It is only compiled if the 'NET46' preprocessor variable is set.
            </remarks>
        </member>
        <member name="M:Network.Bluetooth.DeviceInfo.#ctor(InTheHand.Net.Sockets.BluetoothDeviceInfo)">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Network.Bluetooth.DeviceInfo"/>, mapping the given <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>
            to the <see cref="T:Network.Bluetooth.DeviceInfo"/>.
            </summary>
            <param name="deviceInfo">
            The <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> whose properties to use for the new <see cref="T:Network.Bluetooth.DeviceInfo"/> instance.
            </param>
        </member>
        <member name="P:Network.Bluetooth.DeviceInfo.DeviceName">
            <summary>
            The name of the Bluetooth device.
            </summary>
        </member>
        <member name="P:Network.Bluetooth.DeviceInfo.IsKnown">
            <summary>
            Whether the device is already known.
            </summary>
        </member>
        <member name="P:Network.Bluetooth.DeviceInfo.SignalStrength">
            <summary>
            The signal strength of the Bluetooth connection.
            </summary>
        </member>
        <member name="P:Network.Bluetooth.DeviceInfo.LastSeen">
            <summary>
            The last time that the device was seen via Bluetooth.
            </summary>
        </member>
        <member name="P:Network.Bluetooth.DeviceInfo.LastUsed">
            <summary>
            The last time that the device was used.
            </summary>
        </member>
        <member name="P:Network.Bluetooth.DeviceInfo.BluetoothDeviceInfo">
            <summary>
            The <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> for the device.
            </summary>
        </member>
        <member name="M:Network.Bluetooth.DeviceInfo.GenerateDeviceInfos(InTheHand.Net.Sockets.BluetoothDeviceInfo[])">
            <summary>
            For each of the given <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>s, generates a <see cref="T:Network.Bluetooth.DeviceInfo"/> and returns the generated array.
            </summary>
            <param name="infos">
            An array of <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>s, for each of which to generate the corresponding <see cref="T:Network.Bluetooth.DeviceInfo"/>.
            </param>
            <returns>An array of <see cref="T:Network.Bluetooth.DeviceInfo"/>s, one for each of the given <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>s.</returns>
        </member>
        <member name="T:Network.ClientConnectionContainer">
            <summary>
            The connection container contains a tcp and x udp connections.
            It provides convenient methods to reduce the number of code lines which are needed to manage all the connections.
            By default one tcp and one udp connection will be created automatically.
            </summary>
        </member>
        <member name="F:Network.ClientConnectionContainer.reconnectTimer">
            <summary>
            The reconnect timer. Invoked if we lose the connection.
            </summary>
        </member>
        <member name="F:Network.ClientConnectionContainer.tcpConnection">
            <summary>
            The connections we have to deal with.
            </summary>
        </member>
        <member name="F:Network.ClientConnectionContainer.sendSlowBuffer">
            <summary>
            If there is no connection yet, save the packets in this buffer.
            </summary>
        </member>
        <member name="F:Network.ClientConnectionContainer.tcpPacketHandlerBackup">
            <summary>
            Cache all the handlers to apply them after we got a new connection.
            </summary>
        </member>
        <member name="E:Network.ClientConnectionContainer.connectionLost">
            <summary>
            Occurs when we get or lose a tcp or udp connection.
            </summary>
        </member>
        <member name="M:Network.ClientConnectionContainer.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.ClientConnectionContainer"/> class.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.#ctor(Network.TcpConnection,Network.UdpConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.ClientConnectionContainer"/> class.
            </summary>
            <param name="tcpConnection">The TCP connection.</param>
            <param name="udpConnection">The UDP connection.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.Initialize">
            <summary>
            Initializes this instance and starts connecting to the endpoint.
            </summary>
        </member>
        <member name="P:Network.ClientConnectionContainer.AutoReconnect">
            <summary>
            Gets or sets if this container should automatically reconnect to the endpoint if the connection has been closed.
            </summary>
            <value><c>true</c> if [automatic reconnect]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.ClientConnectionContainer.ReconnectInterval">
            <summary>
            Gets or sets the reconnect interval in [ms].
            </summary>
            <value>The reconnect interval.</value>
        </member>
        <member name="P:Network.ClientConnectionContainer.TcpConnection">
            <summary>
            Gets the TCP connection.
            </summary>
            <value>The TCP connection.</value>
        </member>
        <member name="P:Network.ClientConnectionContainer.UdpConnection">
            <summary>
            Gets the UDP connections.
            </summary>
            <value>The UDP connections.</value>
        </member>
        <member name="E:Network.ClientConnectionContainer.ConnectionEstablished">
            <summary>
            Will be called if a TCP or an UDP connection has been successfully established.
            </summary>
        </member>
        <member name="E:Network.ClientConnectionContainer.ConnectionLost">
            <summary>
            Will be called if a TCP or an UDP connection has been lost.
            </summary>
        </member>
        <member name="P:Network.ClientConnectionContainer.IsAlive_TCP">
            <summary>
            Gets if the TCP connection is alive.
            </summary>
            <value>The is alive_ TCP.</value>
        </member>
        <member name="P:Network.ClientConnectionContainer.IsAlive_UDP">
            <summary>
            Gets if the udp connection is alive.
            </summary>
            <value>The is alive_ UDP.</value>
        </member>
        <member name="P:Network.ClientConnectionContainer.IsAlive">
            <summary>
            Gets if the TCP and udp connection is alive.
            </summary>
            <value>The is alive.</value>
        </member>
        <member name="M:Network.ClientConnectionContainer.TryToConnect(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Tries to connect to the given endpoint.
            </summary>
            <param name="e">e.</param>
            <param name="sender">sender.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.TryConnect">
            <summary>
            Tries to connect to the given endpoint.
            </summary>
        </member>
        <member name="M:Network.ClientConnectionContainer.TCP_RegisterPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0},System.Object)">
            <summary>
            Registers a packetHandler for TCP. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="P">The type we would like to receive.</typeparam>
            <param name="handler">The handler which should be invoked.</param>
            <param name="obj">The object which wants to receive the packet.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.TCP_UnRegisterStaticPacketHandler``1">
            <summary>
            UnRegisters a packetHandler for TCP. If this connection will receive the given type, it will be ignored,
            because there is no handler to invoke anymore.
            </summary>
            <typeparam name="P">The type we dont want to receive anymore.</typeparam>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.TCP_UnRegisterPacketHandler``1(System.Object)">
            <summary>
            UnRegisters a packetHandler for TCP. If this connection will receive the given type, it will be ignored,
            because there is no handler to invoke anymore.
            </summary>
            <typeparam name="P">The type we dont want to receive anymore.</typeparam>
            <param name="obj">The object which wants to receive the packet.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.UDP_RegisterStaticPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0})">
            <summary>
            Registers a packetHandler for UDP. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="P">The type we would like to receive.</typeparam>
            <param name="handler">The handler which should be invoked.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.UDP_RegisterPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0},System.Object)">
            <summary>
            Registers a packetHandler for UDP. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="P">The type we would like to receive.</typeparam>
            <param name="handler">The handler which should be invoked.</param>
            <param name="obj">The object which wants to receive the packet.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.UDP_UnRegisterStaticPacketHandler``1">
            <summary>
            UnRegisters a packetHandler for UDP. If this connection will receive the given type, it will be ignored,
            because there is no handler to invoke anymore.
            </summary>
            <typeparam name="P">The type we dont want to receive anymore.</typeparam>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.UDP_UnRegisterPacketHandler``1(System.Object)">
            <summary>
            UnRegisters a packetHandler for UDP. If this connection will receive the given type, it will be ignored,
            because there is no handler to invoke anymore.
            </summary>
            <typeparam name="P">The type we dont want to receive anymore.</typeparam>
            <param name="obj">The object which wants to receive the packet.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.RegisterStaticPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0})">
            <summary>
            Registers a packetHandler for TCP and UDP. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="P">The type we would like to receive.</typeparam>
            <param name="handler">The handler which should be invoked.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.TCP_RegisterStaticPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0})">
            <summary>
            Registers a packetHandler for TCP. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="P">The type we would like to receive.</typeparam>
            <param name="handler">The handler which should be invoked.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.RegisterPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0},System.Object)">
            <summary>
            Registers a packetHandler for TCP and UDP. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="P">The type we would like to receive.</typeparam>
            <param name="handler">The handler which should be invoked.</param>
            <param name="obj">The object which wants to receive the packet.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.DeregisterStaticPacketHandler``1">
            <summary>
            UnRegisters a packetHandler for TCP and UDP. If this connection will receive the given type, it will be ignored,
            because there is no handler to invoke anymore.
            </summary>
            <typeparam name="P">The type we dont want to receive anymore.</typeparam>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.UnRegisterStaticPacketHandler``1">
            <inheritdoc />
        </member>
        <member name="M:Network.ClientConnectionContainer.DeregisterPacketHandler``1(System.Object)">
            <summary>
            UnRegisters a packetHandler for TCP and UDP. If this connection will receive the given type, it will be ignored,
            because there is no handler to invoke anymore.
            </summary>
            <typeparam name="P">The type we dont want to receive anymore.</typeparam>
            <param name="obj">The object which wants to receive the packet.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.UnRegisterPacketHandler``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Network.ClientConnectionContainer.Shutdown(Network.Enums.CloseReason,System.Boolean)">
            <summary>
            Closes all connections which are bound to this object.
            </summary>
            <param name="closeReason">The close reason.</param>
            <param name="callCloseEvent">If the instance should call the connectionLost event.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.OpenNewTCPConnection">
            <summary>
            Opens the new TCP connection and applies the already registered packet handlers.
            </summary>
        </member>
        <member name="M:Network.ClientConnectionContainer.OpenNewUDPConnection">
            <summary>
            Opens the new UDP connection and applies the already registered packet handlers.
            </summary>
        </member>
        <member name="M:Network.ClientConnectionContainer.SendPing">
            <summary>
            Sends a ping over the TCP connection.
            </summary>
        </member>
        <member name="M:Network.ClientConnectionContainer.SendAsync``1(Network.Packets.Packet)">
            <summary>
            Sends and receives the packet async over TCP.
            </summary>
            <typeparam name="T">The type of the answer.</typeparam>
            <param name="packet">The packet to send.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:Network.ClientConnectionContainer.SendAsync``1(Network.Packets.Packet,Network.Enums.ConnectionType)">
            <summary>
            Sends and receives the packet async.
            </summary>
            <typeparam name="T">The type of the answer.</typeparam>
            <param name="packet">The packet to send.</param>
            <param name="connectionType">Type of the connection to send it over.</param>
            <returns>Task&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentException">The given enum doesn't exist</exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.SendSlowAsync``1(Network.Packets.Packet)">
            <summary>
            Sends and receives the packet async over TCP.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="packet">The packet.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:Network.ClientConnectionContainer.SendFastAsync``1(Network.Packets.Packet)">
            <summary>
            Sends and receives the packet async over UDP.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="packet">The packet.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:Network.ClientConnectionContainer.Send(Network.Packets.Packet,Network.Enums.ConnectionType)">
            <summary>
            Sends a packet via. TCP or UDP depending on the type.
            The server wont be able to send an answer, since no instance object is given.
            </summary>
            <param name="packet">The packet to send.</param>
            <param name="type">The transmission type.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.Send(Network.Packets.Packet)">
            <summary>
            Sends a packet via. TCP by default.
            The server wont be able to send an answer, since no instance object is given.
            </summary>
            <param name="packet">The packet to send.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.SendSlow(Network.Packets.Packet)">
            <summary>
            Sends the given packet over the TCP connection.
            The server wont be able to send an answer, since no instance object is given.
            </summary>
            <param name="packet">The packet to send.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.SendFast(Network.Packets.Packet)">
            <summary>
            Sends the given packet over the UDP connection.
            The server wont be able to send an answer, since no instance object is given.
            </summary>
            <param name="packet">The packet to send.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.Send(Network.Packets.Packet,System.Object,Network.Enums.ConnectionType)">
            <summary>
            Sends a packet via. TCP or UDP depending on the type.
            </summary>
            <param name="packet">The packet to send.</param>
            <param name="instance">The instance to receive an answer.</param>
            <param name="type">The transmission type.</param>
            <exception cref="T:System.ArgumentException">The given enum doesn't exist</exception>
        </member>
        <member name="M:Network.ClientConnectionContainer.Send(Network.Packets.Packet,System.Object)">
            <summary>
            Sends a packet via. TCP by default.
            </summary>
            <param name="packet">The packet to send.</param>
            <param name="instance">The instance to receive an answer.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.SendSlow(Network.Packets.Packet,System.Object)">
            <summary>
            Sends the given packet over the TCP connection.
            </summary>
            <param name="packet">The packet to send.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.SendFast(Network.Packets.Packet,System.Object)">
            <summary>
            Sends the given packet over the UDP connection.
            </summary>
            <param name="packet">The packet to send.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.Reconnect(System.Boolean)">
            <summary>
            Reconnects the TCP and/or the udp connection.
            </summary>
            <param name="forceReconnect">If AutoReconnect is disabled, force a reconnect by settings forceReconnect to true.</param>
        </member>
        <member name="M:Network.ClientConnectionContainer.CreateTcpConnection">
            <summary>
            Creates a new TcpConnection.
            </summary>
            <returns>A TcpConnection.</returns>
        </member>
        <member name="M:Network.ClientConnectionContainer.CreateUdpConnection">
            <summary>
            Creates a new UdpConnection from the existing tcpConnection.
            </summary>
            <returns>A UdpConnection.</returns>
        </member>
        <member name="M:Network.ClientConnectionContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Network.Connection">
            <summary>
            Provides the basic methods a connection has to implement.
            It ensures the connectivity, is able to send pings and keeps track of the latency.
            Every connection instance has 3 threads:
            - (1) Send thread       -> Writes enqueued packets on the stream
            - (2) Read thread       -> Read bytes from the stream
            - (3) Invoke thread     -> Delegates the received packets to the given delegate.
            All 3 threads will be automatically aborted if the connection has been closed.
            After closing the connection, every packet in the send queue will be send before closing the connection.
            </summary>
            <summary>
            Partial class for the connection to offer some additional features.
            </summary>
        </member>
        <member name="F:Network.Connection.PING_INTERVALL">
            <summary>
            Constants.
            </summary>
        </member>
        <member name="F:Network.Connection.keepAlive">
            <summary>
            True if this instance should send in a specific interval a keep alive packet, to ensure
            whether there is a connection or not. If set to [false] <see cref="P:Network.Connection.RTT"/> and <see cref="P:Network.Connection.Ping"/> wont be enabled/refreshed.
            </summary>
        </member>
        <member name="F:Network.Connection.hashCode">
            <summary>
            A fix hashCode that does not change, even if the most objects changed their values.
            </summary>
        </member>
        <member name="F:Network.Connection.packetConverter">
            <summary>
            Is able to convert a packet into a byte array and back.
            </summary>
        </member>
        <member name="E:Network.Connection.connectionClosed">
            <summary>
            A handler which will be invoked if this connection is dead.
            </summary>
        </member>
        <member name="F:Network.Connection.nextPingStopWatch">
            <summary>
            When this stopwatch reached the <see cref="P:Network.Connection.ReceiveTimeout"/> the instance is going to send a ping request.
            </summary>
        </member>
        <member name="F:Network.Connection.receivedPackets">
            <summary>
            This concurrent queue contains the received/send packets which we have to handle.
            </summary>
        </member>
        <member name="F:Network.Connection.dataAvailableEvent">
            <summary>
            Events to save CPU time.
            </summary>
        </member>
        <member name="F:Network.Connection.typeByte">
            <summary>
            Maps the type of a packet to their byte value.
            </summary>
        </member>
        <member name="F:Network.Connection.requestResponseMap">
            <summary>
            Maps a request to their response.
            </summary>
        </member>
        <member name="F:Network.Connection.packetHandlerMap">
            <summary>
            Has to map the objects to their unique id and back.
            </summary>
        </member>
        <member name="M:Network.Connection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Network.Connection"/> class.
            </summary>
        </member>
        <member name="M:Network.Connection.Init">
            <summary>
            Initializes the specified connection stream.
            </summary>
            <param name="connectionStream">The connection stream.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Network.Connection.AddExternalPackets(System.Reflection.Assembly)">
            <summary>
            External packets which also should be known by the network lib can be added with this function.
            All packets in the network lib are included automatically. A call is not essential, even if the used packets
            are not included in the network library. Manuell calls have to be invoked on the client and server side to avaid incompatible states.
            </summary>
            <param name="assembly">The assembly to search for included packets.</param>
        </member>
        <member name="P:Network.Connection.IsAlive">
            <summary>
            Gets or sets a value indicating whether this instance is alive and able to communicate with the endpoint.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.Connection.KeepAlive">
            <summary>
            Gets or sets if this instance should send in a specific interval a keep alive packet, to ensure
            whether there is a connection or not. If set to [false] <see cref="P:Network.Connection.RTT"/> and <see cref="P:Network.Connection.Ping"/> wont be refreshed automatically.
            </summary>
            <value>Keep alive or not.</value>
        </member>
        <member name="P:Network.Connection.ReceiveTimeout">
            <summary>
            Gets or sets the timeout. If the connection does not receive any packet within the specified timeout, the connection will timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Network.Connection.RTT">
            <summary>
            Gets the round trip time.
            </summary>
            <value>The RTT.</value>
        </member>
        <member name="P:Network.Connection.Ping">
            <summary>
            Gets the ping.
            </summary>
            <value>The ping.</value>
        </member>
        <member name="P:Network.Connection.ForceFlush">
            <summary>
            Gets or sets whenever sending a packet to flush the stream immediately.
            </summary>
            <value>Force to flush or not.</value>
        </member>
        <member name="P:Network.Connection.PacketBuffer">
            <summary>
            Gets or sets the packet buffer.
            If we receive a packet which has no handler, it will be buffered
            for future handler registrations. (RegisterPacketHandler)
            This buffer indicates how many packets should be buffered.
            </summary>
            <value>The packet buffer.</value>
        </member>
        <member name="P:Network.Connection.Performance">
            <summary>
            Gets or sets the performance of the network lib.
            The higher the sleep intervals, the slower the connection.
            </summary>
            <value>The performance.</value>
        </member>
        <member name="P:Network.Connection.IntPerformance">
            <summary>
            Gets the performance as an integer.
            </summary>
            <value>The int performance.</value>
        </member>
        <member name="P:Network.Connection.PacketConverter">
            <summary>
            Use your own packetConverter to serialize/deserialze objects.
            Take care that the internal packet structure should still remain the same:
                1. [16bits]  packet type
                2. [32bits]  packet length
                3. [xxbits]  packet data
            The default packetConverter uses reflection to get and set data within objects.
            Using your own packetConverter could result in a higher throughput.
            </summary>
        </member>
        <member name="P:Network.Connection.PacketHandlerMapper">
            <summary>
            Gets all the packets we are listening to.
            </summary>
        </member>
        <member name="M:Network.Connection.BackupPacketHandler">
            <summary>
            Returns the current <see cref="T:Network.Utilities.PacketHandlerMap"/> instance, so that
            the types of packets handled can be read.
            </summary>
            <returns>
            The current <see cref="T:Network.Utilities.PacketHandlerMap"/> instance used by this
            connection.
            </returns>
        </member>
        <member name="M:Network.Connection.RestorePacketHandler(Network.Utilities.PacketHandlerMap)">
            <summary>
            Restores the packetHandler. Can only be called if the internal packetHandler is empty.
            </summary>
            <param name="packetHandlerMap">The object map to restore.</param>
        </member>
        <member name="M:Network.Connection.RegisterStaticPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0})">
            <summary>
            Registers a packetHandler. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="T">The type we would like to receive.</typeparam>
            <param name="handler">The handler which should be invoked.</param>
        </member>
        <member name="M:Network.Connection.RegisterStaticPacketHandler``1(System.Delegate)">
            <summary>
            Registers a packetHandler. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="del">The delete.</param>
        </member>
        <member name="M:Network.Connection.RegisterPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0},System.Object)">
            <summary>
            Registers a packetHandler. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="T">The type we would like to receive.</typeparam>
            <param name="handler">The handler which should be invoked.</param>
            <param name="obj">The object which wants to receive the packet.</param>
        </member>
        <member name="M:Network.Connection.RegisterRawDataHandler(System.String,Network.Interfaces.PacketReceivedHandler{Network.Packets.RawData})">
            <summary>
            "RawData" packets will be forwarded to the desired delegate.
            </summary>
            <param name="key">A specific raw data key. Only raw data packets with the given key will be forwarded to the given delegate.</param>
            <param name="handler">The delegate to forward the packet to.</param>
        </member>
        <member name="M:Network.Connection.RegisterPacketHandler``1(System.Delegate,System.Object)">
            <summary>
            Registers a packetHandler. This handler will be invoked if this connection
            receives the given type.
            </summary>
            <typeparam name="T">The type we would like to receive.</typeparam>
            <param name="del">The delegate.</param>
            <param name="obj">The object which wants to receive the packet.</param>
        </member>
        <member name="M:Network.Connection.UnRegisterStaticPacketHandler``1">
            <inheritdoc />
        </member>
        <member name="M:Network.Connection.UnRegisterPacketHandler``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Network.Connection.UnRegisterRawDataHandler(System.String)">
            <summary>
            UnRegisters a rawData delegate. If this connection will receive a raw data packet with the given key, it will be ignored,
            because there is no handler to invoke anymore.
            </summary>
            <param name="key">The key who is representing a raw data packet.</param>
        </member>
        <member name="E:Network.Connection.ConnectionClosed">
            <summary>
            Adds or removes an action which will be invoked if the network dies.
            </summary>
        </member>
        <member name="E:Network.Connection.ConnectionEstablished">
            <summary>
            Adds or remove an action which will be invoked if the connection
            created a new UDP connection. The delivered tcpConnection represents the tcp connection
            which was in charge of the new establishment.
            </summary>
        </member>
        <member name="M:Network.Connection.ConfigPing(System.Boolean)">
            <summary>
            Configurations the ping and rtt timers.
            </summary>
        </member>
        <member name="M:Network.Connection.SendPing">
            <summary>
            Sends a ping if there is no ping request already running.
            </summary>
        </member>
        <member name="M:Network.Connection.Send(Network.Packets.Packet)">
            <summary>
            Converts the given packet into a binary array and sends it to the client's endpoint.
            You wont be able to receive an answer, because no calling object is given.
            Suitable for static classes, response packets or basic packets without any inheritance.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Network.Connection.Send(Network.Packets.Packet,System.Object)">
            <summary>
            Converts the given packet into a binary array and sends it to the client's endpoint.
            You are able to receive an answer. Iff the packet you send is a request packet.
            </summary>
            <param name="packet">The packet.</param>
            <param name="instance">The instance who called this method.</param>
        </member>
        <member name="M:Network.Connection.SendAsync``1(Network.Packets.Packet)">
            <summary>
            Converts the given packet into a binary array and sends it async to the client's endpoint.
            You are able to receive an answer. Iff the packet you send is a request packet.
            </summary>
            <typeparam name="T">The type of the expected answer.</typeparam>
            <param name="packet">The packet to send.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Network.Connection.Send(Network.Packets.Packet,System.Boolean)">
            <summary>
            Converts the given packet into a binary array and sends it to the client's endpoint.
            You wont be able to receive an answer, because no calling object is given.
            Suitable for static classes, response packets or basic packets without any inheritance.
            </summary>
            <param name="packet">The packet.</param>
            <param name="ignoreWriteLock">if set to <c>true</c> [ignore write lock].</param>
        </member>
        <member name="M:Network.Connection.Send(Network.Packets.Packet,System.Object,System.Boolean)">
            <summary>
            Converts the given packet into a binary array and sends it to the client's endpoint.
            </summary>
            <param name="packet">The packet.</param>
            <param name="instance">The instance.</param>
            <param name="ignoreWriteLock">if set to <c>true</c> [ignore write lock].</param>
        </member>
        <member name="M:Network.Connection.SearchAndInvokeUnknownHandlerPackets(System.Delegate)">
            <summary>
            If a packet has been received which has no receiver (delegate)
            it will be stored till a receiver (delegate) joins the party.
            This method searches for lonely, stored packets, which had
            no receiver in the past, but may have a receiver now. In that
            case, we immediately forward the packet to the subscriber
            and remove it from the sad, lonely collection.
            </summary>
        </member>
        <member name="M:Network.Connection.ReadWork">
            <summary>
            Reads the bytes from the stream.
            </summary>
        </member>
        <member name="M:Network.Connection.WriteWork">
            <summary>
            Writes the packets to the stream.
            </summary>
        </member>
        <member name="M:Network.Connection.InvokeWork">
            <summary>
            This thread checks for new packets in the queue and delegates them
            to the desired delegates, if given.
            </summary>
        </member>
        <member name="M:Network.Connection.WriteSubWork">
            <summary>
            Writes the packets to the stream.
            </summary>
        </member>
        <member name="M:Network.Connection.HandleDefaultPackets(Network.Packets.Packet)">
            <summary>
            Handle the network's packets.
            </summary>
            <param name="packet">The packet to handle.</param>
        </member>
        <member name="M:Network.Connection.PacketWithoutHandlerReceived(Network.Packets.Packet)">
            <summary>
            Packets the without handler received.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Network.Connection.ExternalClose(Network.Enums.CloseReason)">
            <summary>
            The remote endpoint closed the connection.
            </summary>
            <param name="closeReason">The close reason.</param>
        </member>
        <member name="M:Network.Connection.Close(Network.Enums.CloseReason,System.Boolean)">
            <summary>
            Closes this connection, but still sends the data on the stream to the bound endpoint.
            </summary>
            <param name="closeReason">The close reason.</param>
            <param name="callCloseEvent">If the instance should call the connectionLost event.</param>
        </member>
        <member name="M:Network.Connection.UnlockRemoteConnection">
            <summary>
            Unlocks the remote connection so that he is able to send packets.
            </summary>
        </member>
        <member name="M:Network.Connection.GetFreePort">
            <summary>
            Gets the next free port.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Network.Connection.HandleUnknownPacket">
            <summary>
            Handles the unknown packet.
            </summary>
        </member>
        <member name="M:Network.Connection.ObjectMapRefreshed">
            <summary>
            The packetHandlerMap has been refreshed.
            </summary>
        </member>
        <member name="M:Network.Connection.CreateUdpConnection(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Creates a new UdpConnection.
            </summary>
            <param name="localEndPoint">The localEndPoint.</param>
            <param name="remoteEndPoint">The removeEndPoint.</param>
            <param name="writeLock">The writeLock.</param>
            <returns>A UdpConnection.</returns>
        </member>
        <member name="P:Network.Connection.TTL">
            <summary>
            Gets or sets the time to live for the tcp connection.
            </summary>
            <value>The TTL.</value>
        </member>
        <member name="P:Network.Connection.DualMode">
            <summary>
            Gets or sets a value indicating whether [dual mode]. (Ipv6 + Ipv4)
            </summary>
            <value><c>true</c> if [dual mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.Connection.Fragment">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Network.Connection"/> is allowed to fragment the frames.
            </summary>
            <value><c>true</c> if fragment; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Network.Connection.ReadBytes(System.Int32)">
            <summary>
            Reads bytes from the stream.
            </summary>
            <param name="amount">The amount of bytes we want to read.</param>
            <returns>The read bytes.</returns>
        </member>
        <member name="M:Network.Connection.WriteBytes(System.Byte[])">
            <summary>
            Writes bytes to the stream.
            </summary>
            <param name="bytes">The bytes to write.</param>
        </member>
        <member name="M:Network.Connection.CloseHandler(Network.Enums.CloseReason)">
            <summary>
            Handles if the connection should be closed, based on the reason.
            </summary>
            <param name="closeReason">The close reason.</param>
        </member>
        <member name="P:Network.Connection.HopLimit">
            <summary>
            The hop limit. This is compareable to the Ipv4 TTL.
            </summary>
        </member>
        <member name="P:Network.Connection.NoDelay">
            <summary>
            Gets or sets if the packet should be send with or without any delay.
            If disabled, no data will be buffered at all and sent immediately to it's destination.
            There is no guarantee that the network performance will be increased.
            </summary>
        </member>
        <member name="P:Network.Connection.IsRoutingEnabled">
            <summary>
            Gets or sets if the packet should be sent directly to its destination or not.
            </summary>
        </member>
        <member name="P:Network.Connection.UseLoopback">
            <summary>
            Gets or sets if it should bypass hardware.
            </summary>
        </member>
        <member name="P:Network.Connection.LocalIPEndPoint">
            <summary>
            Gets the ip address's local endpoint of this connection.
            </summary>
            <value>The ip end point.</value>
        </member>
        <member name="P:Network.Connection.RemoteIPEndPoint">
            <summary>
            Gets the ip address's remote endpoint of this connection.
            </summary>
            <value>The ip end point.</value>
        </member>
        <member name="M:Network.Connection.CloseSocket">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="M:Network.Connection.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Network.Connection.ToString">
            <summary>
            Value of the connection.
            </summary>
            <returns>Overall data about the connection.</returns>
        </member>
        <member name="P:Network.Connection.Logger">
            <summary>
            Logger for the connection and all protected classes.
            </summary>
        </member>
        <member name="P:Network.Connection.IsOsx">
            <summary>
            Is the executing assembly on a MAC machine.
            </summary>
            <returns>[True] if on MAC. [False] if not.</returns>
        </member>
        <member name="P:Network.Connection.IsLinux">
            <summary>
            Is the executing assembly on a Linux machine.
            </summary>
            <returns>[True] if on Linux. [False] if not.</returns>
        </member>
        <member name="P:Network.Connection.IsWindows">
            <summary>
            Is the executing assembly on a Windows machine.
            </summary>
            <returns>[True] if on Windows. [False] if not.</returns>
        </member>
        <member name="M:Network.Connection.InitAddons">
            <summary>
            Initializes all the addons.
            </summary>
        </member>
        <member name="M:Network.Connection.LogIntoStream(System.IO.Stream)">
            <summary>
            Logs events, exceptions and messages into the given stream.
            To disable logging into a previous provided stream, call this method again
            and provide a null reference as stream. Stream hot swapping is supported.
            </summary>
            <param name="stream">The stream to log into.</param>
        </member>
        <member name="P:Network.Connection.EnableLogging">
            <summary>
            Indicates if the connection should automatically log.
            Logging in DEBUG mode by default ON.
            </summary>
        </member>
        <member name="M:Network.Connection.SendRawData(System.String,System.Byte[])">
            <summary>
            Sends raw data.
            </summary>
            <param name="key">The identifying key.</param>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:Network.Connection.SendRawData(Network.Packets.RawData)">
            <summary>
            Sends a raw data packet.
            </summary>
            <param name="rawData">The packet to send.</param>
        </member>
        <member name="M:Network.ConnectionContainer.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.ConnectionContainer"/> class.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="P:Network.ConnectionContainer.IPAddress">
            <summary>
            Gets the ip address this container is connected to.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:Network.ConnectionContainer.Port">
            <summary>
            Gets the port this container is connected to.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:Network.ConnectionContainer.PublicKey">
            <summary>
            The PublicKey of this instance.
            </summary>
        </member>
        <member name="P:Network.ConnectionContainer.PrivateKey">
            <summary>
            The PrivateKey of this instance.
            </summary>
        </member>
        <member name="P:Network.ConnectionContainer.KeySize">
            <summary>
            The used KeySize of this instance.
            </summary>
        </member>
        <member name="P:Network.ConnectionContainer.RSAPair">
            <summary>
            Gets or sets the RSA-Pair.
            </summary>
            <value>The RSA pair.</value>
        </member>
        <member name="M:Network.ConnectionContainer.AddKownType(System.Reflection.Assembly)">
            <summary>
            Adds known types to the TCP and UDP connection as soon
            as a connection has been established. This is not essential, but will speed up the initial time.
            Be aware that this method has te be called from the server and the clientConnectionContainer with the same parameter.
            Else the server or the client will crash, because of unknown types.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Network.ConnectionContainer.RemoveKnownType(System.Reflection.Assembly)">
            <summary>
            Removes the known type from the init process.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="T:Network.ConnectionResult">
            <summary>
            The possible results of a connection attempt.
            </summary>
        </member>
        <member name="F:Network.ConnectionResult.Connected">
            <summary>
            A connection could be established
            </summary>
        </member>
        <member name="F:Network.ConnectionResult.Timeout">
            <summary>
            A connection couldn't be established.
            IP + Port correct? Firewall rules?
            </summary>
        </member>
        <member name="F:Network.ConnectionResult.TCPConnectionNotAlive">
            <summary>
            Could not establish a UDP connection.
            The depending TCP connection is not alive.
            </summary>
        </member>
        <member name="T:Network.ConnectionFactory">
            <summary>
            This factory creates instances of Tcp and Udp connections.
            </summary>
        </member>
        <member name="F:Network.ConnectionFactory.CONNECTION_TIMEOUT">
            <summary>
            The timeout of a connection attempt in [ms]
            </summary>
        </member>
        <member name="F:Network.ConnectionFactory.GUID">
            <summary>
            The GUID of this assembly, needed for bluetooth connections.
            </summary>
        </member>
        <member name="M:Network.ConnectionFactory.#cctor">
            <summary>
            Set the GUID of this assembly.
            </summary>
        </member>
        <member name="M:Network.ConnectionFactory.GetBluetoothDevices">
            <summary>
            Gets all the bluetooth devices in range.
            </summary>
            <returns>The bluetooth devices in range.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.GetBluetoothDevicesAsync">
            <summary>
            Gets all the bluetooth devices in range async.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateBluetoothConnection(Network.Bluetooth.DeviceInfo)">
            <summary>
            Creates a new instance of the BluetoothConnection with the given device info.
            </summary>
            <param name="bluetoothDeviceInfo">The device to pair with.</param>
            <returns>The connection to send and receive data.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateBluetoothConnectionAsync(Network.Bluetooth.DeviceInfo)">
            <summary>
            Creates a new instance of the BluetoothConnection with the given device info.
            </summary>
            <param name="bluetoothDeviceInfo">The device to pair with.</param>
            <returns>The connection to send and receive data.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateBluetoothConnection(InTheHand.Net.Sockets.BluetoothClient)">
            <summary>
            Creates a new instance of the BluetoothConnection with the given client.
            </summary>
            <param name="bluetoothClient">The client to create a connection with.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateTcpConnection(System.String,System.Int32,Network.ConnectionResult@)">
            <summary>
            Creates a new tcp connection and tries to connect to the given endpoint.
            </summary>
            <param name="ipAddress">The ip address to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="connectionResult">The connection result.</param>
            <returns>A tcp connection object if the successfully connected. Else null.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureTcpConnection(System.String,System.Int32,Network.ConnectionResult@,System.Int32)">
            <summary>
            Creates a new tcp secure connection and tries to connect to the given endpoint.
            </summary>
            <param name="ipAddress">The ip address to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="keySize">The keySize for the RSA en/decryption.</param>
            <param name="connectionResult">The connection result.</param>
            <returns>A tcp connection object if the successfully connected. Else null.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureTcpConnection(System.String,System.Int32,System.String,System.String,Network.ConnectionResult@,System.Int32)">
            <summary>
            Creates a new tcp secure connection and tries to connect to the given endpoint.
            </summary>
            <param name="ipAddress">The ip address to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="publicKey">The public key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">The keySize.</param>
            <param name="connectionResult">The connection result.</param>
            <returns>A tcp connection object if the successfully connected. Else null.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureTcpConnection(System.String,System.Int32,Network.RSA.RSAPair,Network.ConnectionResult@)">
            <summary>
            Creates a new tcp secure connection and tries to connect to the given endpoint.
            </summary>
            <param name="ipAddress">The ip address to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <param name="connectionResult">The connection result.</param>
            <returns>A tcp connection object if the successfully connected. Else null.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateTcpConnectionAsync(System.String,System.Int32)">
            <summary>
            Creates a new tcp connection and tries to connect to the given endpoint async.
            </summary>
            <param name="ipAddress">The ip address to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>A tcp connection object if the successfully connected. Else null.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureTcpConnectionAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new secure tcp connection and tries to connect to the given endpoint async.
            </summary>
            <param name="ipAddress">The ip address to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="keySize">The keySize.</param>
            <returns>A tcp connection object if the successfully connected. Else null.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureTcpConnectionAsync(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Creates a new secure tcp connection and tries to connect to the given endpoint async.
            </summary>
            <param name="ipAddress">The ip address to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="publicKey">The public key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">The keySize.</param>
            <returns>A tcp connection object if the successfully connected. Else null.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureTcpConnectionAsync(System.String,System.Int32,Network.RSA.RSAPair)">
            <summary>
            Creates a new secure tcp connection and tries to connect to the given endpoint async.
            </summary>
            <param name="ipAddress">The ip address to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <returns>A tcp connection object if the successfully connected. Else null.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateTcpConnection(System.Net.Sockets.TcpClient)">
            <summary>
            Wraps the given tcpClient into the networks tcp connection.
            </summary>
            <param name="tcpClient">The connected tcp client.</param>
            <returns>The TcpConnection.</returns>
            <exception cref="T:System.ArgumentException">Socket is not connected.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureTcpConnection(System.Net.Sockets.TcpClient,System.String,System.String,System.Int32)">
            <summary>
            Wraps the given tcpClient into the networks tcp connection.
            </summary>
            <param name="tcpClient">The connected tcp client.</param>
            <param name="publicKey">The public key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">The keySize.</param>
            <returns>The TcpConnection.</returns>
            <exception cref="T:System.ArgumentException">Socket is not connected.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureTcpConnection(System.Net.Sockets.TcpClient,Network.RSA.RSAPair)">
            <summary>
            Wraps the given tcpClient into the networks tcp connection.
            </summary>
            <param name="tcpClient">The connected tcp client.</param>
            <param name="rsaPair">The RSA-Pair.</param>
            <returns>The TcpConnection.</returns>
            <exception cref="T:System.ArgumentException">Socket is not connected.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateUdpConnection(Network.TcpConnection,Network.ConnectionResult@)">
            <summary>
            Creates a new instance of a udp connection.
            </summary>
            <param name="tcpConnection">The tcp connection to establish the udp connection.</param>
            <returns>The UdpConnection.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureUdpConnection(Network.TcpConnection,Network.ConnectionResult@,System.Int32)">
            <summary>
            Creates a new instance of a secure udp connection.
            </summary>
            <param name="tcpConnection">The tcp connection to establish the udp connection.</param>
            <param name="keySize">The keySize.</param>
            <returns>The UdpConnection.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureUdpConnection(Network.TcpConnection,System.String,System.String,Network.ConnectionResult@,System.Int32)">
            <summary>
            Creates a new instance of a secure udp connection.
            </summary>
            <param name="tcpConnection">The tcp connection to establish the udp connection.</param>
            <param name="publicKey">The public key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">The keySize.</param>
            <returns>The UdpConnection.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureUdpConnection(Network.TcpConnection,Network.RSA.RSAPair,Network.ConnectionResult@)">
            <summary>
            Creates a new instance of a secure udp connection.
            </summary>
            <param name="tcpConnection">The tcp connection to establish the udp connection.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <returns>The UdpConnection.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateUdpConnectionAsync(Network.TcpConnection)">
            <summary>
            Creates a new instance of a udp connection async.
            </summary>
            <param name="tcpConnection">The tcp connection to establish the udp connection.</param>
            <returns>Task&lt;UdpConnection&gt;.</returns>
            <exception cref="T:System.ArgumentException">TcpConnection is not connected to the endpoint.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureUdpConnectionAsync(Network.TcpConnection,System.Int32)">
            <summary>
            Creates a new instance of a udp connection async.
            </summary>
            <param name="tcpConnection">The tcp connection to establish the udp connection.</param>
            <param name="keySize">The keySize.</param>
            <returns>Task&lt;UdpConnection&gt;.</returns>
            <exception cref="T:System.ArgumentException">TcpConnection is not connected to the endpoint.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureUdpConnectionAsync(Network.TcpConnection,System.String,System.String,System.Int32)">
            <summary>
            Creates a new instance of a udp connection async.
            </summary>
            <param name="tcpConnection">The tcp connection to establish the udp connection.</param>
            <param name="publicKey">The public key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">The keySize.</param>
            <returns>Task&lt;UdpConnection&gt;.</returns>
            <exception cref="T:System.ArgumentException">TcpConnection is not connected to the endpoint.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureUdpConnectionAsync(Network.TcpConnection,Network.RSA.RSAPair)">
            <summary>
            Creates a new instance of a udp connection async.
            </summary>
            <param name="tcpConnection">The tcp connection to establish the udp connection.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <returns>Task&lt;UdpConnection&gt;.</returns>
            <exception cref="T:System.ArgumentException">TcpConnection is not connected to the endpoint.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateClientConnectionContainer(System.String,System.Int32)">
            <summary>
            Creates a new instance of a connection container.
            </summary>
            <returns>ConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureClientConnectionContainer(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a secure-connection container. (RSA Encryption)
            <param name="keySize">The keySize.</param>
            </summary>
            <returns>ConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureClientConnectionContainer(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Creates a new instance of a secure-connection container. (RSA Encryption)
            <param name="publicKey">The public key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">The keySize.</param>
            </summary>
            <returns>ConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureClientConnectionContainer(System.String,System.Int32,Network.RSA.RSAPair)">
            <summary>
            Creates a new instance of a secure-connection container. (RSA Encryption)
            </summary>
            <param name="ipAddress">The IP-Address.</param>
            <param name="port">The Port.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <returns>ConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateClientConnectionContainer(Network.TcpConnection,Network.UdpConnection)">
            <summary>
            Creates a new instance of a connection container.
            </summary>
            <param name="tcpConnection">The TCP connection.</param>
            <param name="udpConnection">The UDP connection.</param>
            <returns>ConnectionContainer.</returns>
            <exception cref="T:System.ArgumentException">TCP and UDP connection must be connected to an endpoint.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureClientConnectionContainer(Network.TcpConnection,Network.UdpConnection,System.Int32)">
            <summary>
            Creates a new instance of a secure-connection container. (RSA Encryption)
            </summary>
            <param name="tcpConnection">The TCP connection.</param>
            <param name="udpConnection">The UDP connection.</param>
            <param name="keySize">The keySize.</param>
            <returns>ConnectionContainer.</returns>
            <exception cref="T:System.ArgumentException">TCP and UDP connection must be connected to an endpoint.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureClientConnectionContainer(Network.TcpConnection,Network.UdpConnection,System.String,System.String,System.Int32)">
            <summary>
            Creates a new instance of a secure-connection container. (RSA Encryption)
            </summary>
            <param name="tcpConnection">The TCP connection.</param>
            <param name="udpConnection">The UDP connection.</param>
            <param name="publicKey">The public key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">The keySize.</param>
            <returns>ConnectionContainer.</returns>
            <exception cref="T:System.ArgumentException">TCP and UDP connection must be connected to an endpoint.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureClientConnectionContainer(Network.TcpConnection,Network.UdpConnection,Network.RSA.RSAPair)">
            <summary>
            Creates a new instance of a secure-connection container. (RSA Encryption)
            </summary>
            <param name="tcpConnection">The TCP connection.</param>
            <param name="udpConnection">The UDP connection.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <returns>ConnectionContainer.</returns>
            <exception cref="T:System.ArgumentException">TCP and UDP connection must be connected to an endpoint.</exception>
        </member>
        <member name="M:Network.ConnectionFactory.CreateServerConnectionContainer(System.Int32,System.Boolean)">
            <summary>
            Creates the server connection container.
            </summary>
            <param name="port">The port.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
            <returns>ServerConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureServerConnectionContainer(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a secure server connection container.
            </summary>
            <param name="port">The port.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
            <param name="keySize">The keySize.</param>
            <returns>ServerConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureServerConnectionContainer(System.Int32,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a secure server connection container.
            </summary>
            <param name="port">The port.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
            <param name="publicKey">The public key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">The keySize.</param>
            <returns>ServerConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureServerConnectionContainer(System.Int32,Network.RSA.RSAPair,System.Boolean)">
            <summary>
            Creates a secure server connection container.
            </summary>
            <param name="port">The port.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <returns>ServerConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateServerConnectionContainer(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates the server connection container.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
            <returns>ServerConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureServerConnectionContainer(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a secure server connection container.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <param name="keySize">The keySize.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
            <returns>ServerConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureServerConnectionContainer(System.String,System.Int32,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a secure server connection container.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <param name="publicKey">The public key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key in xml format. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">The keySize.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
            <returns>ServerConnectionContainer.</returns>
        </member>
        <member name="M:Network.ConnectionFactory.CreateSecureServerConnectionContainer(System.String,System.Int32,Network.RSA.RSAPair,System.Boolean)">
            <summary>
            Creates a secure server connection container.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
            <returns>ServerConnectionContainer.</returns>
        </member>
        <member name="T:Network.Converter.IPacketConverter">
            <summary>
            Describes the methods that a packet converter must implement in order to be able to serialise and deserialise packets to and from a binary form.
            </summary>
        </member>
        <member name="M:Network.Converter.IPacketConverter.SerialisePacket(Network.Packets.Packet)">
            <summary>
            Serialises the given <see cref="T:Network.Packets.Packet"/> object to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="packet">The <see cref="T:Network.Packets.Packet"/> object to serialise into a <see cref="T:System.Byte"/> array.</param>
            <returns>A <see cref="T:System.Byte"/> array that holds the serialised packet.</returns>
        </member>
        <member name="M:Network.Converter.IPacketConverter.GetBytes(Network.Packets.Packet)">
            <summary>
            Serialises the given <see cref="T:Network.Packets.Packet"/> object to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="packet">The <see cref="T:Network.Packets.Packet"/> object to serialise into a <see cref="T:System.Byte"/> array.</param>
            <returns>A <see cref="T:System.Byte"/> array that holds the serialised packet.</returns>
        </member>
        <member name="M:Network.Converter.IPacketConverter.SerialisePacket``1(``0)">
            <summary>
            Serialises the given <see cref="T:Network.Packets.Packet"/> object to a <see cref="T:System.Byte"/> array.
            </summary>
            <typeparam name="P">The <see cref="T:System.Type"/> of packet to serialise.</typeparam>
            <param name="packet">The <see cref="T:Network.Packets.Packet"/> object to serialise into a <see cref="T:System.Byte"/> array.</param>
            <returns>A <see cref="T:System.Byte"/> array that holds the serialised packet.</returns>
        </member>
        <member name="M:Network.Converter.IPacketConverter.DeserialisePacket(System.Type,System.Byte[])">
            <summary>
            Deserialises the given <see cref="T:System.Byte"/> array into a <see cref="T:Network.Packets.Packet"/> of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="packetType">The <see cref="T:System.Type"/> of <see cref="T:Network.Packets.Packet"/> to deserialise the <see cref="T:System.Byte"/> array to.</param>
            <param name="serialisedPacket">The <see cref="T:System.Byte"/> array holding the serialised <see cref="T:Network.Packets.Packet"/>.</param>
            <returns>The deserialised <see cref="T:Network.Packets.Packet"/> object of the given type.</returns>
        </member>
        <member name="M:Network.Converter.IPacketConverter.GetPacket(System.Type,System.Byte[])">
            <summary>
            Deserialises the given <see cref="T:System.Byte"/> array into a <see cref="T:Network.Packets.Packet"/> of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="packetType">The <see cref="T:System.Type"/> of <see cref="T:Network.Packets.Packet"/> to deserialise the <see cref="T:System.Byte"/> array to.</param>
            <param name="serialisedPacket">The <see cref="T:System.Byte"/> array holding the serialised <see cref="T:Network.Packets.Packet"/>.</param>
            <returns>The deserialised <see cref="T:Network.Packets.Packet"/> object of the given type.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Network.Converter.IPacketConverter.DeserialisePacket``1(System.Byte[])" -->
        <member name="T:Network.Converter.ObjectState">
            <summary>
            Enumerates the possible states of a network object before and after deserialisation.
            </summary>
        </member>
        <member name="F:Network.Converter.ObjectState.Null">
            <summary>
            The network object is null, so there is nothing to read from the network stream.
            </summary>
        </member>
        <member name="F:Network.Converter.ObjectState.NULL">
            <summary>
            Identical to <see cref="F:Network.Converter.ObjectState.Null"/>.
            </summary>
        </member>
        <member name="F:Network.Converter.ObjectState.NotNull">
            <summary>
            The network object is not null, so there is something to read from the network stream.
            </summary>
        </member>
        <member name="F:Network.Converter.ObjectState.NOT_NULL">
            <summary>
            Identical to <see cref="F:Network.Converter.ObjectState.NotNull"/>.
            </summary>
        </member>
        <member name="T:Network.Converter.PacketConverter">
            <summary>
            Implements <see cref="T:Network.Converter.IPacketConverter"/>, and provides methods to serialise and deserialise a <see cref="T:Network.Packets.Packet"/> object to and from its binary form.
            </summary>
        </member>
        <member name="F:Network.Converter.PacketConverter.packetPropertyCache">
            <summary>
            Caches packet <see cref="T:System.Type"/>s and their relevant <see cref="T:System.Reflection.PropertyInfo"/>s, to avoid slow and unnecessary reflection.
            </summary>
        </member>
        <member name="F:Network.Converter.PacketConverter.packetPropertyCacheLock">
            <summary>
            An object to synchronise multi-threaded access to the <see cref="F:Network.Converter.PacketConverter.packetPropertyCache"/>.
            </summary>
        </member>
        <member name="M:Network.Converter.PacketConverter.GetTypeProperties(System.Type)">
            <summary>
            Returns an array of the <see cref="T:System.Reflection.PropertyInfo"/>s that need to be serialised on the given <see cref="T:System.Type"/>. If the given <see cref="T:System.Type"/>
            has already been cached, it will use the cached <see cref="T:System.Reflection.PropertyInfo"/> array, to save CPU time.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> whose serialisable properties to get.</param>
            <returns>An array of all <see cref="T:System.Reflection.PropertyInfo"/>s that should be serialised on the given <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Network.Converter.PacketConverter.SerialisePacket(Network.Packets.Packet)">
            <inheritdoc />
        </member>
        <member name="M:Network.Converter.PacketConverter.GetBytes(Network.Packets.Packet)">
            <inheritdoc />
        </member>
        <member name="M:Network.Converter.PacketConverter.SerialisePacket``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Network.Converter.PacketConverter.DeserialisePacket(System.Type,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Network.Converter.PacketConverter.GetPacket(System.Type,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Network.Converter.PacketConverter.DeserialisePacket``1(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Network.Converter.PacketConverter.SerialiseObjectToWriter(System.Object,System.IO.BinaryWriter)">
            <summary>
            Serialises all the properties on the given <see cref="T:System.Object"/> that need to be serialised to the given <see cref="T:System.IO.BinaryWriter"/>s
            underlying <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> whose properties to serialise using the given <see cref="T:System.IO.BinaryWriter"/>.</param>
            <param name="binaryWriter">
            The <see cref="T:System.IO.BinaryWriter"/> to whose underlying <see cref="T:System.IO.MemoryStream"/> to serialise the properties of the given <see cref="T:System.Object"/>.
            </param>
            <remarks>This method can only serialise properties that lack the custom <see cref="T:Network.Attributes.PacketIgnorePropertyAttribute"/>.</remarks>
        </member>
        <member name="M:Network.Converter.PacketConverter.SerialiseObjectToWriter(System.Object,System.Reflection.PropertyInfo,System.IO.BinaryWriter)">
            <summary>
            Serialises the given <see cref="T:System.Reflection.PropertyInfo"/> to the given <see cref="T:System.IO.BinaryWriter"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> whose <see cref="T:System.Reflection.PropertyInfo"/> value to serialise.</param>
            <param name="propertyInfo">
            The <see cref="T:System.Reflection.PropertyInfo"/> to serialise to the given <see cref="T:System.IO.BinaryWriter"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            </param>
            <param name="binaryWriter">
            The <see cref="T:System.IO.BinaryWriter"/> to whose underlying <see cref="T:System.IO.MemoryStream"/> to serialise the given <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
        </member>
        <member name="M:Network.Converter.PacketConverter.SerialiseArrayToWriter(System.Object,System.Reflection.PropertyInfo,System.IO.BinaryWriter)">
            <summary>
            Serialises the given <see cref="T:System.Array"/> to the given <see cref="T:System.IO.BinaryWriter"/>s underlying <see cref="T:System.IO.MemoryStream"/>. Uses
            <see cref="M:Network.Converter.PacketConverter.SerialiseObjectToWriter(System.Object,System.IO.BinaryWriter)"/> to serialise each of the <see cref="T:System.Array"/>s elements to the stream.
            </summary>
            <param name="obj">
            The <see cref="T:System.Array"/> to serialise to the given <see cref="T:System.IO.BinaryWriter"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            </param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> holding the <see cref="T:System.Array"/>.</param>
            <param name="binaryWriter">
            The <see cref="T:System.IO.BinaryWriter"/> to whose underlying <see cref="T:System.IO.MemoryStream"/> to serialise the given <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <exception cref="T:System.NullReferenceException">
            Thrown if the <see cref="T:System.Array"/> held in the given <see cref="T:System.Reflection.PropertyInfo"/> is null, or if the <see cref="T:System.Array"/>s elements do not have a type.
            </exception>
        </member>
        <member name="M:Network.Converter.PacketConverter.SerialiseListToWriter(System.Object,System.Reflection.PropertyInfo,System.IO.BinaryWriter)">
            <summary>
            Serialises the given <see cref="T:System.Collections.IList"/> to the given <see cref="T:System.IO.BinaryWriter"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            Uses <see cref="M:Network.Converter.PacketConverter.SerialiseObjectToWriter(System.Object,System.IO.BinaryWriter)"/> to serialise each of the <see cref="T:System.Collections.IList"/>s elements to the stream.
            </summary>
            <param name="obj">
            The <see cref="T:System.Collections.IList"/> to serialise to the given <see cref="T:System.IO.BinaryWriter"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            </param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> holding the <see cref="T:System.Collections.IList"/>. </param>
            <param name="binaryWriter">
            The <see cref="T:System.IO.BinaryWriter"/> to whose underlying <see cref="T:System.IO.MemoryStream"/> to serialise the given <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <exception cref="T:System.NullReferenceException">
            Thrown if the <see cref="T:System.Collections.IList"/> held in the given <see cref="T:System.Reflection.PropertyInfo"/> is null, or if the <see cref="T:System.Collections.IList"/>s elements do not have a type.
            </exception>
        </member>
        <member name="M:Network.Converter.PacketConverter.DeserialiseObjectFromReader(System.Object,System.IO.BinaryReader)">
            <summary>
            Deserialises all the properties on the given <see cref="T:System.Object"/> that can be deserialised from the given <see cref="T:System.IO.BinaryReader"/>s
            underlying <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> whose properties to deserialise using the given <see cref="T:System.IO.BinaryReader"/>.</param>
            <param name="binaryReader">
            The <see cref="T:System.IO.BinaryReader"/> from whose underlying <see cref="T:System.IO.MemoryStream"/> to deserialise the properties of the given <see cref="T:System.Object"/>.
            </param>
            <returns>The given <see cref="T:System.Object"/> with all deserialisable properties set.</returns>
            <remarks>
            This method can only deserialise properties that lack the custom <see cref="T:Network.Attributes.PacketIgnorePropertyAttribute"/>. Any other properties
            will be left at their default values.
            </remarks>
        </member>
        <member name="M:Network.Converter.PacketConverter.DeserialiseObjectFromReader(System.Object,System.Reflection.PropertyInfo,System.IO.BinaryReader)">
            <summary>
            Deserialises the given <see cref="T:System.Reflection.PropertyInfo"/> from the given <see cref="T:System.IO.BinaryReader"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="obj"> The <see cref="T:System.Object"/> whose <see cref="T:System.Reflection.PropertyInfo"/> value to deserialise.</param>
            <param name="propertyInfo">
            The <see cref="T:System.Reflection.PropertyInfo"/> to deserialise from the given <see cref="T:System.IO.BinaryReader"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            </param>
            <param name="binaryReader">
            The <see cref="T:System.IO.BinaryReader"/> from whose underlying <see cref="T:System.IO.MemoryStream"/> to deserialise the given <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <returns>
            The <see cref="T:System.Object"/> deserialised from the <see cref="T:System.IO.MemoryStream"/>. This can be null if the <see cref="T:Network.Converter.ObjectState"/> is
            <see cref="F:Network.Converter.ObjectState.Null"/>.
            </returns>
        </member>
        <member name="M:Network.Converter.PacketConverter.ReadArrayFromStream(System.Object,System.Reflection.PropertyInfo,System.IO.BinaryReader)">
            <summary>
            Deserialises the given <see cref="T:System.Array"/> from the given <see cref="T:System.IO.BinaryReader"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            Uses <see cref="M:Network.Converter.PacketConverter.DeserialiseObjectFromReader(System.Object,System.IO.BinaryReader)"/> to serialise each of the <see cref="T:System.Array"/>s elements to the stream.
            </summary>
            <param name="obj">The <see cref="T:System.Array"/> to deserialise from the given <see cref="T:System.IO.BinaryReader"/>s underlying <see cref="T:System.IO.MemoryStream"/>.</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> holding the <see cref="T:System.Array"/>.</param>
            <param name="binaryReader">
            The <see cref="T:System.IO.BinaryReader"/> from whose underlying <see cref="T:System.IO.MemoryStream"/> to deserialise the given <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <see cref="T:System.Array"/>s elements do not have a type.</exception>
        </member>
        <member name="M:Network.Converter.PacketConverter.ReadListFromStream(System.Object,System.Reflection.PropertyInfo,System.IO.BinaryReader)">
            <summary>
            Deserialises the given <see cref="T:System.Collections.IList"/> from the given <see cref="T:System.IO.BinaryReader"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            Uses <see cref="M:Network.Converter.PacketConverter.DeserialiseObjectFromReader(System.Object,System.IO.BinaryReader)"/> to serialise each of the <see cref="T:System.Collections.IList"/>s elements to the stream.
            </summary>
            <param name="obj"> The <see cref="T:System.Collections.IList"/> to deserialise from the given <see cref="T:System.IO.BinaryReader"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            </param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> holding the <see cref="T:System.Collections.IList"/>.</param>
            <param name="binaryReader">
            The <see cref="T:System.IO.BinaryReader"/> from whose underlying <see cref="T:System.IO.MemoryStream"/> to deserialise the given <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <exception cref="T:System.NullReferenceException">
            Thrown if the <see cref="T:System.Collections.IList"/> held in the <see cref="T:System.IO.MemoryStream"/> is null, or if the <see cref="T:System.Collections.IList"/>s elements do not have a type.
            </exception>
        </member>
        <member name="M:Network.Converter.PacketConverter.ReadPrimitiveFromStream(System.Type,System.IO.BinaryReader)">
            <summary>
            Reads a primitive type from the given <see cref="T:System.IO.BinaryReader"/>s underlying <see cref="T:System.IO.MemoryStream"/> and returns it.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the primitive to read from the given <see cref="T:System.IO.BinaryReader"/>s underlying <see cref="T:System.IO.MemoryStream"/>.
            </param>
            <param name="binaryReader">The <see cref="T:System.IO.BinaryReader"/> from whose underlying <see cref="T:System.IO.MemoryStream"/> to read the primitive.</param>
            <returns>The primitive that was read from the given <see cref="T:System.IO.BinaryReader"/>s underlying <see cref="T:System.IO.MemoryStream"/>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown whenever a <see cref="T:System.Type"/> is passed to this method that is not a primitive.</exception>
        </member>
        <member name="T:Network.Converter.PacketConverterHelper">
            <summary>
            Provides helper methods for serialising and deserialising packets to and from their binary form.
            </summary>
        </member>
        <member name="F:Network.Converter.PacketConverterHelper.PropertyIgnoreAttributeType">
            <summary>
            The <see cref="T:System.Type"/> of the custom property that will cause a property to be ignored during serialisation. See <see cref="T:Network.Attributes.PacketIgnorePropertyAttribute"/>
            for more information regarding its usage.
            </summary>
        </member>
        <member name="M:Network.Converter.PacketConverterHelper.TypeIsPrimitive(System.Type)">
            <summary>
            Checks whether the given <see cref="T:System.Type"/> is a primitive type, that is if it lives in the 'System' namespace.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to test.</param>
            <returns>Whether the given <see cref="T:System.Type"/> is a primitive.</returns>
            <remarks>If the given <see cref="T:System.Type"/> is null, then the method will return false.</remarks>
        </member>
        <member name="M:Network.Converter.PacketConverterHelper.PropertyIsPrimitive(System.Reflection.PropertyInfo)">
            <summary>
            Checks whether the underlying <see cref="T:System.Type"/> of the given property is a primitive type. See <see cref="M:Network.Converter.PacketConverterHelper.TypeIsPrimitive(System.Type)"/> for more
            information regarding its usage.
            </summary>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> to test.</param>
            <returns>Whether the given <see cref="T:System.Reflection.PropertyInfo"/>s underlying <see cref="T:System.Type"/> is primitive.</returns>
            <remarks>If the given properties underlying element <see cref="T:System.Type"/> is null, then the method will return false.</remarks>
        </member>
        <member name="M:Network.Converter.PacketConverterHelper.GetTypeProperties(System.Type)">
            <summary>
            Gets all the <see cref="T:System.Reflection.PropertyInfo"/>s of the given <see cref="T:System.Type"/> that should be serialised (lack the <see cref="T:Network.Attributes.PacketIgnorePropertyAttribute"/>
            attribute) and returns them as an array.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> whose <see cref="T:System.Reflection.PropertyInfo"/>s to read.</param>
            <returns>An array of all the <see cref="T:System.Reflection.PropertyInfo"/>s on the given object.</returns>
        </member>
        <member name="M:Network.Converter.PacketConverterHelper.GetObjectProperties(System.Object)">
            <summary>
            Gets all the <see cref="T:System.Reflection.PropertyInfo"/>s of the given <see cref="T:System.Object"/> that should be serialised and returns them as an array. See
            <see cref="M:Network.Converter.PacketConverterHelper.GetTypeProperties(System.Type)"/> for more information.
            </summary>
            <param name="_object">The <see cref="T:System.Object"/> whose <see cref="T:System.Reflection.PropertyInfo"/>s to read.</param>
            <returns>An array of all the <see cref="T:System.Reflection.PropertyInfo"/>s on the given object.</returns>
        </member>
        <member name="M:Network.Converter.PacketConverterHelper.InstantiateObject(System.Type)">
            <summary>
            Instantiates and returns a default <see cref="T:System.Object"/> of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="objectType">The <see cref="T:System.Type"/> to instantiate.</param>
            <returns>The default instance of the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Network.Converter.PacketConverterHelper.InstantiatePacket(System.Type)">
            <summary>
            Instantiates and returns a default <see cref="T:Network.Packets.Packet"/> of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="packetType">The <see cref="T:System.Type"/> to instantiate.</param>
            <returns>The default instance of the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Network.Converter.PacketConverterHelper.InstantiateGenericObject``1">
            <summary>
            Instantiates and returns a default <see cref="T:System.Object"/> of the given generic type.
            </summary>
            <typeparam name="O">The generic type of the object to instantiate.</typeparam>
            <returns>The default instance of the given generic type.</returns>
        </member>
        <member name="M:Network.Converter.PacketConverterHelper.InstantiateGenericPacket``1">
            <summary>
            Instantiates and returns a default <see cref="T:System.Object"/> of the given generic type.
            </summary>
            <typeparam name="P">The generic type of packet to instantiate.</typeparam>
            <returns>The default instance of the given generic type.</returns>
        </member>
        <member name="T:Network.Converter.RawDataConverter">
            <summary>
            Converts raw primitive type values into a <see cref="T:Network.Packets.RawData"/> packet that can be sent across the network, and vice versa.
            </summary>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromBoolean(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUInt8(System.String,System.Byte)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.Byte"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUInt16(System.String,System.UInt16)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUInt32(System.String,System.UInt32)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUInt64(System.String,System.UInt64)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromInt8(System.String,System.SByte)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.SByte"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromInt16(System.String,System.Int16)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.Int16"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromInt32(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.Int32"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromInt64(System.String,System.Int64)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.Int64"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUTF16_BigEndian_String(System.String,System.String)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.String"/> value, using the <see cref="P:System.Text.Encoding.BigEndianUnicode"/> encoding.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUTF16_LittleEndian_String(System.String,System.String)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.String"/> value, using the <see cref="P:System.Text.Encoding.Unicode"/> (little endian) encoding.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUnicodeString(System.String,System.String)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.String"/> value, using the <see cref="P:System.Text.Encoding.Unicode"/> encoding. Identical to
            <see cref="M:Network.Converter.RawDataConverter.FromUTF16_LittleEndian_String(System.String,System.String)"/> method.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUTF32String(System.String,System.String)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.String"/> value, using the <see cref="P:System.Text.Encoding.UTF32"/> encoding.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUTF8String(System.String,System.String)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.String"/> value, using the <see cref="P:System.Text.Encoding.UTF8"/> encoding.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromUTF7String(System.String,System.String)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.String"/> value, using the <see cref="P:System.Text.Encoding.UTF7"/> encoding.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromASCIIString(System.String,System.String)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.String"/> value, using the <see cref="P:System.Text.Encoding.ASCII"/> encoding.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromChar(System.String,System.Char)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.Char"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromSingle(System.String,System.Single)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.Single"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.FromDouble(System.String,System.Double)">
            <summary>
            Returns a <see cref="T:Network.Packets.RawData"/> holding the given <see cref="T:System.Double"/> value.
            </summary>
            <param name="key">The key to use for the <see cref="T:Network.Packets.RawData"/> packet.</param>
            <param name="value">The primitive value to send.</param>
            <returns>A <see cref="T:Network.Packets.RawData"/> packet holding the given primitive, with the given key.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.GetBytes(System.Object)">
            <summary>
            Converts the given value into bytes and returns them.
            </summary>
            <param name="value">The value to convert into bytes.</param>
            <returns>The byte array of the serialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToBoolean(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.Boolean"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUInt8(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.Byte"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUInt16(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.UInt16"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUInt32(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.UInt32"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUInt64(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.UInt64"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToInt8(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.SByte"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToInt16(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.Int16"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToInt32(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.Int32"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToInt64(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.Int64"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUTF16_BigEndian_String(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.String"/> using the <see cref="P:System.Text.Encoding.BigEndianUnicode"/> encoding, and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUTF16_LittleEndian_String(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.String"/> using the <see cref="P:System.Text.Encoding.Unicode"/> (little endian) encoding, and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUnicodeString(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.String"/> using the <see cref="P:System.Text.Encoding.Unicode"/> (little endian) encoding, and
            returns it. Identical to the <see cref="M:Network.Converter.RawDataConverter.ToUTF16_LittleEndian_String(Network.Packets.RawData)"/>
            method.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUTF32String(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.String"/> using the <see cref="P:System.Text.Encoding.UTF32"/> encoding, and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUTF8String(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.String"/> using the <see cref="P:System.Text.Encoding.UTF8"/> encoding, and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToUTF7String(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.String"/> using the <see cref="P:System.Text.Encoding.UTF7"/> encoding, and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToASCIIString(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.String"/> using the <see cref="P:System.Text.Encoding.ASCII"/> encoding, and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToChar(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.Char"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToSingle(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.Single"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="M:Network.Converter.RawDataConverter.ToDouble(Network.Packets.RawData)">
            <summary>
            Converts the <see cref="P:Network.Packets.RawData.Data"/> array into a <see cref="T:System.Double"/> and returns it.
            </summary>
            <param name="rawData">The <see cref="T:Network.Packets.RawData"/> packet whose data to deserialise.</param>
            <returns>The deserialised value.</returns>
        </member>
        <member name="T:Network.Enums.CloseReason">
            <summary>
            Enumerates the possible reasons for a <see cref="T:Network.Connection"/> closing.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.NetworkError">
            <summary>
            An unknown exception occurred in the network library.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.ServerClosed">
            <summary>
            The server closed the connection.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.ClientClosed">
            <summary>
            The client closed the connection.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.UnknownPacket">
            <summary>
            The endpoint sent an unknown packet which cant be processed.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.Timeout">
            <summary>
            Connection timeout reached.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.DifferentVersion">
            <summary>
            The endpoints version is different.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.InvalidUdpRequest">
            <summary>
            UDP connection requested in an improper situation.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.UdpLimitExceeded">
            <summary>
            The client requested too many UDP connections.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.InternalException">
            <summary>
            An internal handled exception.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.WritePacketThreadException">
            <summary>
            An exception in the writePacketThread occured.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.ReadPacketThreadException">
            <summary>
            An exception in the readPacketThread occured.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.InvokePacketThreadException">
            <summary>
            An exception in the invokePacketThread occured.
            </summary>
        </member>
        <member name="F:Network.Enums.CloseReason.AssemblyDoesNotExist">
            <summary>
            The assembly for the incoming packet is not available. Make sure that every project is including that assembly.
            </summary>
        </member>
        <member name="T:Network.Enums.ConnectionType">
            <summary>
            Enumerates the possible types of <see cref="T:Network.Connection"/>.
            </summary>
        </member>
        <member name="F:Network.Enums.ConnectionType.TCP">
            <summary>
            The <see cref="T:Network.Connection"/> should use TCP to communicate across the network.
            </summary>
        </member>
        <member name="F:Network.Enums.ConnectionType.UDP">
            <summary>
            The <see cref="T:Network.Connection"/> should use UDP to communicate across the network.
            </summary>
        </member>
        <member name="F:Network.Enums.ConnectionType.Bluetooth">
            <summary>
            The <see cref="T:Network.Connection"/> should use Bluetooth to communicate across the network.
            </summary>
        </member>
        <member name="T:Network.Enums.LogLevel">
            <summary>
            Enumerates the possible severity levels for a log message.
            </summary>
        </member>
        <member name="F:Network.Enums.LogLevel.Information">
            <summary>
            This log message contains information. Low severity.
            </summary>
        </member>
        <member name="F:Network.Enums.LogLevel.Warning">
            <summary>
            This log message contains a warning. Medium severity.
            </summary>
        </member>
        <member name="F:Network.Enums.LogLevel.Error">
            <summary>
            This log message contains an error. High severity.
            </summary>
        </member>
        <member name="F:Network.Enums.LogLevel.Exception">
            <summary>
            This log message contains an exception. Extreme severity.
            </summary>
        </member>
        <member name="T:Network.Enums.PacketState">
            <summary>
            Enumerates the possible states that a <see cref="T:Network.Packets.Packet"/> could be in after transmission.
            </summary>
        </member>
        <member name="F:Network.Enums.PacketState.Success">
            <summary>
            The packet was successfully transmitted and received.
            </summary>
        </member>
        <member name="F:Network.Enums.PacketState.Timeout">
            <summary>
            The packet was not received within the specified timeout. The <see cref="T:Network.Connection"/> could be dead.
            </summary>
        </member>
        <member name="F:Network.Enums.PacketState.ConnectionNotAlive">
            <summary>
            The <see cref="T:Network.Connection"/> is not alive, so no asynchronous transmission is possible.
            </summary>
        </member>
        <member name="T:Network.Enums.Performance">
            <summary>
            Enumerates the possible values for sleep intervals. Fastest Performance >> Slowest Performance : SoftRealtime >> EnergySaving
            </summary>
        </member>
        <member name="F:Network.Enums.Performance.EnergySaving">
            <summary>
            Sleep intervals of more than 500ms.
            </summary>
        </member>
        <member name="F:Network.Enums.Performance.Energy_Saving">
            <summary>
            Identical to <see cref="F:Network.Enums.Performance.EnergySaving"/>.
            </summary>
        </member>
        <member name="F:Network.Enums.Performance.Slow">
            <summary>
            Sleep intervals of more than 100ms.
            </summary>
        </member>
        <member name="F:Network.Enums.Performance.Normal">
            <summary>
            Sleep interval of more than 25ms.
            </summary>
        </member>
        <member name="F:Network.Enums.Performance.Fast">
            <summary>
            Sleep interval of more than 10ms.
            </summary>
        </member>
        <member name="F:Network.Enums.Performance.Default">
            <summary>
            Sleep interval of more than 5ms. This is the default value, recommended for usage.
            </summary>
        </member>
        <member name="F:Network.Enums.Performance.SoftRealtime">
            <summary>
            Sleep interval of more than 1ms.
            </summary>
        </member>
        <member name="F:Network.Enums.Performance.Soft_Realtime">
            <summary>
            Identical to <see cref="F:Network.Enums.Performance.SoftRealtime"/>.
            </summary>
        </member>
        <member name="T:Network.Extensions.ConcurrentBagExtensions">
            <summary>
            Provides additional functionality to the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> class.
            </summary>
            <remarks>See https://stackoverflow.com/a/48861922/2934290 for the original question and the relevant code. </remarks>
        </member>
        <member name="M:Network.Extensions.ConcurrentBagExtensions.Remove``1(System.Collections.Concurrent.ConcurrentBag{``0},``0)">
            <summary>
            Removes the given item from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
            <typeparam name="T">The type for the elements held in the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.</typeparam>
            <param name="bag">The <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> instance that the extension method should affect.</param>
            <param name="item">The item to remove from the bag.</param>
        </member>
        <member name="T:Network.Extensions.ConnectionExtensions">
            <summary>
            Provides additional functionality to the <see cref="T:Network.Connection"/> class.
            </summary>
        </member>
        <member name="F:Network.Extensions.ConnectionExtensions.counter">
            <summary>
            A private thread-safe counter for generating unique hash codes.
            </summary>
            <remarks>
            Increments are guaranteed to be atomic on all 32-bit and higher systems, as any single-cpu-instruction operation on a variable is
            by definition atomic. Since an <see cref="T:System.Int32"/> is 32 bits long, it can be loaded with 1 instruction into a register on a 32-bit or
            higher system. Likewise, addition is also atomic. This guarantees atomic behaviour for increments on an <see cref="T:System.Int32"/>.
            </remarks>
        </member>
        <member name="M:Network.Extensions.ConnectionExtensions.GenerateUniqueHashCode(Network.Connection)">
            <summary>
            Generates a new unique hash code for the <see cref="T:Network.Connection"/> via a thread-safe increment operation.
            </summary>
            <param name="connection">The <see cref="T:Network.Connection"/> instance this extension method affects.</param>
            <returns>A new, unique hash code.</returns>
            <remarks>This method is thread safe, see <see cref="F:Network.Extensions.ConnectionExtensions.counter"/> for more info.</remarks>
        </member>
        <member name="T:Network.Extensions.EnumeratorExtensions">
            <summary>
            Provides additional functionality to the <see cref="T:System.Collections.IEnumerator"/> interface.
            </summary>
        </member>
        <member name="M:Network.Extensions.EnumeratorExtensions.ToList``1(System.Collections.IEnumerator)">
            <summary>
            Adds each item in the <see cref="T:System.Collections.IEnumerator"/> into a <see cref="T:System.Collections.Generic.List`1"/> and return the new <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="enumerator">The <see cref="T:System.Collections.IEnumerator"/> instance that the extension method affects.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> instance with the elements of the <see cref="T:System.Collections.IEnumerator"/>.</returns>
        </member>
        <member name="T:Network.Extensions.RawDataExtension">
            <summary>
            Provides additional functionality to the <see cref="T:Network.Packets.RawData"/> class.
            </summary>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToBoolean(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToBoolean(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUInt8(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUInt8(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUInt16(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUInt16(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUInt32(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUInt32(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUInt64(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUInt64(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToInt8(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToInt8(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToInt16(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToInt16(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToInt32(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToInt32(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToInt64(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToInt64(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUTF16_BigEndian_String(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUTF16_BigEndian_String(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUTF16_LittleEndian_String(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUTF16_LittleEndian_String(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUnicodeString(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUnicodeString(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUTF32String(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUTF32String(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUTF8String(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUTF8String(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToUTF7String(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToUTF7String(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToASCIIString(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToASCIIString(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToChar(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToChar(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToSingle(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToSingle(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="M:Network.Extensions.RawDataExtension.ToDouble(Network.Packets.RawData)">
            <inheritdoc cref="M:Network.Converter.RawDataConverter.ToDouble(Network.Packets.RawData)"/>
            <remarks>
            This method should probably not be used, it would be preferable to use the relevant <see cref="T:Network.Converter.RawDataConverter"/> method instead.
            </remarks>
        </member>
        <member name="T:Network.Extensions.RSACryptoServiceProviderExtensions">
            <summary>
            Provides additional functionality to the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/> class, that is unavailable under Linux by default.
            </summary>
        </member>
        <member name="M:Network.Extensions.RSACryptoServiceProviderExtensions.ImportParametersFromXmlString(System.Security.Cryptography.RSACryptoServiceProvider,System.String)">
            <summary>
            Reads in and imports <see cref="T:System.Security.Cryptography.RSAParameters"/> from the given XML string.
            </summary>
            <param name="rsaCryptoServiceProvider">The <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/> this extension method affects.</param>
            <param name="xml">The XML string from which to load the parameters.</param>
            <exception cref="T:System.NullReferenceException">Thrown if the <see cref="T:System.Xml.XmlDocument"/> generated from the given xml <see cref="T:System.String"/> is null.</exception>
        </member>
        <member name="M:Network.Extensions.RSACryptoServiceProviderExtensions.ConvertFromBase64String(System.String)">
            <summary>
            Decodes a base-64 encoded string into a byte array and returns it.
            </summary>
            <param name="text">The base-64 encoded string.</param>
            <returns>The byte array that the base-64 encoded text represents.</returns>
        </member>
        <member name="T:Network.Extensions.RSAParametersExtensions">
            <summary>
            Provides additional functionality to the <see cref="T:System.Security.Cryptography.RSAParameters"/> struct.
            </summary>
        </member>
        <member name="M:Network.Extensions.RSAParametersExtensions.ExtractPrivateKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Extracts the private key from the given <see cref="T:System.Security.Cryptography.RSAParameters"/> and returns it as an XML string.
            </summary>
            <param name="rsaParameter">The <see cref="T:System.Security.Cryptography.RSAParameters"/> instance that the extension method affects.</param>
            <returns>The XML <see cref="T:System.String"/> with the private key.</returns>
        </member>
        <member name="M:Network.Extensions.RSAParametersExtensions.ExtractPublicKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Extracts the public key from the given <see cref="T:System.Security.Cryptography.RSAParameters"/> and returns it as an XML string.
            </summary>
            <param name="rsaParameter">The <see cref="T:System.Security.Cryptography.RSAParameters"/> instance that the extension method affects.</param>
            <returns>The XML <see cref="T:System.String"/> with the public key.</returns>
        </member>
        <member name="T:Network.Extensions.ThreadExtensions">
            <summary>
            Provides additional functionality to the <see cref="T:System.Threading.Thread"/> class, that isn't available under .NET Standard 2.0.
            </summary>
        </member>
        <member name="M:Network.Extensions.ThreadExtensions.AbortSave(System.Threading.Thread)">
            <summary>
            Allows for a <see cref="T:System.Threading.Thread"/> object to be aborted in a program running under the .NET Standard C# implementation.
            </summary>
            <param name="thread">The <see cref="T:System.Threading.Thread"/> instance this extension method affects.</param>
            <returns>Whether the <see cref="M:System.Threading.Thread.Abort(System.Object)"/> method raised an exception.</returns>
        </member>
        <member name="T:Network.Extensions.WaitHandleExtensions">
            <summary>
            Provides additional functionality to the <see cref="T:System.Threading.WaitHandle"/> class.
            </summary>
        </member>
        <member name="M:Network.Extensions.WaitHandleExtensions.AsTask(System.Threading.WaitHandle)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that represents asynchronously waiting for the <see cref="T:System.Threading.WaitHandle"/> instance to be set. There is no
            timeout for the wait operation.
            </summary>
            <param name="handle">The <see cref="T:System.Threading.WaitHandle"/> instance this extension method affects.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Network.Extensions.WaitHandleExtensions.AsTask(System.Threading.WaitHandle,System.TimeSpan)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that represents asynchronously waiting for the <see cref="T:System.Threading.WaitHandle"/> instance to be set. Cancels the
            <see cref="T:System.Threading.Tasks.Task"/> if the given timeout is exceeded.
            </summary>
            <param name="handle">The <see cref="T:System.Threading.WaitHandle"/> instance this extension method affects.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait for the operation to complete before it is cancelled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Network.Interfaces.PacketReceivedHandler`1">
            <summary>
            Represents a method that handles receiving a <see cref="T:Network.Packets.Packet"/> of the given type on the given <see cref="T:Network.Connection"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Network.Packets.Packet"/> that the delegate should handle.</typeparam>
            <param name="packet">The received <see cref="T:Network.Packets.Packet"/> object.</param>
            <param name="connection">The <see cref="T:Network.Connection"/> that received the packet.</param>
        </member>
        <member name="T:Network.Interfaces.IPacketHandler">
            <summary>
            Describes the methods a class must implement to handle <see cref="T:Network.Packets.Packet"/>s.
            </summary>
        </member>
        <member name="M:Network.Interfaces.IPacketHandler.RegisterStaticPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0})">
            <summary>
            Registers the given <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/> for all <see cref="T:Network.Packets.Packet"/>s of the given type.
            </summary>
            <typeparam name="P">The type of <see cref="T:Network.Packets.Packet"/> the delegate should handle.</typeparam>
            <param name="handler">The <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/> delegate to be invoked for each received packet of the given type.</param>
        </member>
        <member name="M:Network.Interfaces.IPacketHandler.RegisterPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0},System.Object)">
            <summary>
            Registers the given <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/> on the given <see cref="T:System.Object"/> for all <see cref="T:Network.Packets.Packet"/>s of the given type.
            </summary>
            <typeparam name="P">The type of <see cref="T:Network.Packets.Packet"/> the delegate should handle.</typeparam>
            <param name="handler">The <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/> delegate to be invoked for each received packet of the given type.</param>
            <param name="obj">The <see cref="T:System.Object"/> that should receive the <see cref="T:Network.Packets.Packet"/>s.</param>
        </member>
        <member name="M:Network.Interfaces.IPacketHandler.UnRegisterStaticPacketHandler``1">
            <summary>
            Deregisters all <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/>s for the given <see cref="T:Network.Packets.Packet"/> type.
            </summary>
            <typeparam name="P">
            The type of <see cref="T:Network.Packets.Packet"/> for which all currently registered <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/>s should be deregistered.
            </typeparam>
        </member>
        <member name="M:Network.Interfaces.IPacketHandler.UnRegisterPacketHandler``1(System.Object)">
            <summary>
            Deregisters all <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/>s for the given <see cref="T:Network.Packets.Packet"/> type that are currently registered on the given
            <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="P">
            The type of <see cref="T:Network.Packets.Packet"/> for which all currently registered <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/>s should be deregistered.
            </typeparam>
            <param name="obj">
            The <see cref="T:System.Object"/> on which all currently registered <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/>s of the given type should be deregistered.
            </param>
        </member>
        <member name="T:Network.Interfaces.IRSACapability">
            <summary>
            Describes the properties and methods that a class must implement to be capable of RSA encryption.
            </summary>
        </member>
        <member name="P:Network.Interfaces.IRSACapability.RSAPair">
            <summary>
            Stores a RSA private and public key pair.
            </summary>
        </member>
        <member name="T:Network.Interfaces.IRSAConnection">
            <summary>
            Describes the properties and methods that a class must implement to be able to communicate via secure, RSA encrypted messages.
            </summary>
        </member>
        <member name="P:Network.Interfaces.IRSAConnection.EncryptionProvider">
            <summary>
            Provides RSA encryption services, to encrypt serialised <see cref="T:Network.Packets.Packet"/>s.
            </summary>
        </member>
        <member name="P:Network.Interfaces.IRSAConnection.DecryptionProvider">
            <summary>
            Provides RSA decryption services, to decrypt serialised <see cref="T:Network.Packets.Packet"/>s.
            </summary>
        </member>
        <member name="P:Network.Interfaces.IRSAConnection.CommunicationPartnerRSAPair">
            <inheritdoc cref="P:Network.Interfaces.IRSACapability.RSAPair"/>
        </member>
        <member name="M:Network.Interfaces.IRSAConnection.EncryptBytes(System.Byte[])">
            <summary>
            Encrypts the given byte array using the <see cref="P:Network.Interfaces.IRSAConnection.EncryptionProvider"/> and returns the encrypted version.
            </summary>
            <param name="bytes">The original, plaintext byte array.</param>
            <returns>The encrypted byte array.</returns>
        </member>
        <member name="M:Network.Interfaces.IRSAConnection.DecryptBytes(System.Byte[])">
            <summary>
            Decrypts the given byte array using the <see cref="P:Network.Interfaces.IRSAConnection.DecryptionProvider"/> and returns the plaintext version.
            </summary>
            <param name="bytes">The encrypted byte array.</param>
            <returns>The original, plaintext byte array.</returns>
        </member>
        <member name="T:Network.Logging.PacketDirection">
            <summary>
            Enumerates the directions that a <see cref="T:Network.Packets.Packet"/> can be traveling on the network.
            </summary>
        </member>
        <member name="F:Network.Logging.PacketDirection.Incoming">
            <summary>
            The packet is incoming from the network; it is being received by the monitored <see cref="T:Network.Connection"/>.
            </summary>
        </member>
        <member name="F:Network.Logging.PacketDirection.Outgoing">
            <summary>
            The packet is outgoing to the network; it is being transmitted by the monitored <see cref="T:Network.Connection"/>.
            </summary>
        </member>
        <member name="T:Network.Logging.NetworkLog">
            <summary>
            Logs network traffic, events and connection states into a given <see cref="T:System.IO.Stream"/>, be it a <see cref="T:System.IO.FileStream"/> or the 'Output' window of Visual Studio.
            </summary>
        </member>
        <member name="F:Network.Logging.NetworkLog.monitoredConnection">
            <summary>
            The <see cref="T:Network.Connection"/> that the <see cref="T:Network.Logging.NetworkLog"/> instance will monitor for network traffic, etc.
            </summary>
        </member>
        <member name="M:Network.Logging.NetworkLog.#ctor(Network.Connection)">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Network.Logging.NetworkLog"/> class, that monitors the given <see cref="T:Network.Connection"/>.
            </summary>
            <param name="connection">The <see cref="T:Network.Connection"/> that the <see cref="T:Network.Logging.NetworkLog"/> should monitor for traffic, events and states.</param>
        </member>
        <member name="P:Network.Logging.NetworkLog.EnableLogging">
            <summary>
            Whether logging is enabled.
            </summary>
        </member>
        <member name="P:Network.Logging.NetworkLog.TimeStamp">
            <summary>
            The current timestamp, in the format 'hh:mm:ss:fff'.
            </summary>
        </member>
        <member name="P:Network.Logging.NetworkLog.StreamLogger">
            <summary>
            The <see cref="T:System.IO.StreamWriter"/> that writes all logged to the current output <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Network.Logging.NetworkLog.LogToAllOutputs(System.String)">
            <summary>
            WRites the given message to the current <see cref="P:Network.Logging.NetworkLog.StreamLogger"/>, and to the 'Output' window.
            </summary>
            <param name="message">The message that should be logged.</param>
        </member>
        <member name="M:Network.Logging.NetworkLog.Log(System.String,System.Exception,Network.Enums.LogLevel)">
            <summary>
            Logs the given <see cref="T:System.String"/> message and <see cref="T:System.Exception"/>, with the given <see cref="T:Network.Enums.LogLevel"/> to all output <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="message">The message to log to the output <see cref="T:System.IO.Stream"/>s.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log to the output <see cref="T:System.IO.Stream"/>s.</param>
            <param name="logLevel">The <see cref="T:Network.Enums.LogLevel"/> of the log message.</param>
            <remarks>
            If <see cref="P:Network.Logging.NetworkLog.EnableLogging"/> if set to <c>false</c> or the <see cref="P:Network.Logging.NetworkLog.StreamLogger"/> is <c>null</c>, then no message is logged.
            </remarks>
        </member>
        <member name="M:Network.Logging.NetworkLog.Log(System.Exception,Network.Enums.LogLevel)">
            <summary>
            Logs the given <see cref="T:System.Exception"/> with the given <see cref="T:Network.Enums.LogLevel"/> to the output <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to log to the output <see cref="T:System.IO.Stream"/>s.</param>
            <param name="logLevel">The <see cref="T:Network.Enums.LogLevel"/> of the log message.</param>
        </member>
        <member name="M:Network.Logging.NetworkLog.Log(System.String,Network.Enums.LogLevel)">
            <summary>
            Logs the given <see cref="T:System.String"/> message with the given <see cref="T:Network.Enums.LogLevel"/> to the output <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="message">The message to log to the output <see cref="T:System.IO.Stream"/>s.</param>
            <param name="logLevel">The <see cref="T:Network.Enums.LogLevel"/> of the log message.</param>
        </member>
        <member name="M:Network.Logging.NetworkLog.SetOutputStream(System.IO.Stream)">
            <summary>
            Sets the output <see cref="T:System.IO.Stream"/> (<see cref="P:Network.Logging.NetworkLog.StreamLogger"/>) to the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to log messages into.</param>
        </member>
        <member name="M:Network.Logging.NetworkLog.LogInComingPacket(System.Byte[],Network.Packets.Packet)">
            <summary>
            Logs an incoming packet to the output <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="packet">The serialised incoming packet.</param>
            <param name="packetObj">The incoming <see cref="T:Network.Packets.Packet"/> object.</param>
        </member>
        <member name="M:Network.Logging.NetworkLog.LogOutgoingPacket(System.Byte[],Network.Packets.Packet)">
            <summary>
            Logs an outgoing packet to the output <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="packet">The serialised outgoing packet.</param>
            <param name="packetObj">The outgoing <see cref="T:Network.Packets.Packet"/> object.</param>
        </member>
        <member name="M:Network.Logging.NetworkLog.LogPacket(System.Byte[],Network.Packets.Packet,Network.Logging.PacketDirection)">
            <summary>
            Logs the given packet to the output <see cref="T:System.IO.Stream"/>s, along with its direction.
            </summary>
            <param name="packet">The serialised packet.</param>
            <param name="packetObj">The <see cref="T:Network.Packets.Packet"/> object.</param>
            <param name="direction">The direction that the packet is traveling across the network.</param>
        </member>
        <member name="M:Network.Logging.NetworkLog.BuildConsoleTable(System.Byte[],Network.Packets.Packet,System.String)">
            <summary>
            Builds a <see cref="T:ConsoleTables.ConsoleTable"/> with the given parameters and returns it.
            </summary>
            <param name="packet">The serialised packet.</param>
            <param name="packetObj">The <see cref="T:Network.Packets.Packet"/> object.</param>
            <param name="direction"> The direction that the packet is traveling across the network.</param>
            <returns>The built <see cref="T:ConsoleTables.ConsoleTable"/>.</returns>
        </member>
        <member name="M:Network.Logging.NetworkLog.BuildLogHeader(System.Exception,Network.Enums.LogLevel)">
            <summary>
            Builds and returns the header for each log message.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to log.</param>
            <param name="logLevel">The <see cref="T:Network.Enums.LogLevel"/> for the log message.</param>
            <returns>The formatted log message header <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Network.Logging.NetworkLog.BuildException(System.Exception)">
            <summary>
            Builds and returns a <see cref="T:System.String"/> message containing an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to format as a <see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.Exception"/> formatted as a <see cref="T:System.String"/> message.</returns>
        </member>
        <member name="T:Network.Packets.AddPacketTypeRequest">
            <summary>
            Instructs the paired <see cref="T:Network.Connection"/> to add all the <see cref="T:System.Type"/>s in the given <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Network.Packets.AddPacketTypeRequest.#ctor(System.String)">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Network.Packets.AddPacketTypeRequest"/> class, with the given <see cref="T:System.Reflection.Assembly"/>s name specified.
            </summary>
            <param name="assemblyName">Name of the assembly to add.</param>
        </member>
        <member name="P:Network.Packets.AddPacketTypeRequest.AssemblyName">
            <summary>
            The name of the <see cref="T:System.Reflection.Assembly"/> that should be added.
            </summary>
        </member>
        <member name="T:Network.Packets.AddPacketTypeResponse">
            <summary>
            Response packet for the <see cref="T:Network.Packets.AddPacketTypeRequest"/> packet.
            </summary>
        </member>
        <member name="M:Network.Packets.AddPacketTypeResponse.#ctor(System.Collections.Generic.List{System.UInt16},Network.Packets.AddPacketTypeRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.Packets.AddPacketTypeResponse"/> class.
            </summary>
            <param name="dictionary">All registered packet IDs for the currently registered <see cref="T:Network.Packets.Packet"/>s.</param>
            <param name="request">The <see cref="T:Network.Packets.AddPacketTypeRequest"/>.</param>
        </member>
        <member name="P:Network.Packets.AddPacketTypeResponse.LocalDict">
            <summary>
            List of all the local <see cref="T:Network.Packets.Packet"/> IDs that have been registered.
            </summary>
        </member>
        <member name="T:Network.Packets.CloseRequest">
            <summary>
            Closes the paired <see cref="T:Network.Connection"/>.
            </summary>
        </member>
        <member name="M:Network.Packets.CloseRequest.#ctor(Network.Enums.CloseReason)">
            <inheritdoc />
        </member>
        <member name="P:Network.Packets.CloseRequest.CloseReason">
            <summary>
            The reason that the paired <see cref="T:Network.Connection"/> should close.
            </summary>
        </member>
        <member name="T:Network.Packets.EstablishUdpRequest">
            <summary>
            Establishes a UDP connection with the paired <see cref="T:Network.Connection"/>.
            </summary>
        </member>
        <member name="M:Network.Packets.EstablishUdpRequest.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Network.Packets.EstablishUdpRequest.UdpPort">
            <summary>
            The port that the UDP connection should use.
            </summary>
        </member>
        <member name="T:Network.Packets.EstablishUdpResponse">
            <summary>
            Response packet for the <see cref="T:Network.Packets.EstablishUdpRequest"/> packet.
            </summary>
        </member>
        <member name="M:Network.Packets.EstablishUdpResponse.#ctor(System.Int32,Network.Packets.RequestPacket)">
            <inheritdoc />
        </member>
        <member name="P:Network.Packets.EstablishUdpResponse.UdpPort">
            <summary>
            The port the UDP connection should use.
            </summary>
        </member>
        <member name="T:Network.Packets.EstablishUdpResponseACK">
            <summary>
            Acknowledgement packet for the <see cref="T:Network.Packets.EstablishUdpResponse"/> packet.
            </summary>
        </member>
        <member name="T:Network.Packets.Packet">
            <summary>
            Represents a packet that can be sent across a network. By default, all properties of the packet will be serialised (this can be customised using
            the <see cref="T:Network.Attributes.PacketIgnorePropertyAttribute"/>). Allowed property types are listed here: http://www.indie-dev.at/?page_id=461. NOTE: Inheriting
            classes should ALWAYS include the default parameter-less constructor. See 'remarks' for more information.
            </summary>
            <remarks>
            The default, parameter-less constructor is required to allow for dynamic instantiation of an empty packet during deserialisation, whose properties
            will be read from a <see cref="T:System.IO.MemoryStream"/>, deserialised and set accordingly. See <see cref="T:Network.Converter.PacketConverter"/> for more on the serialisation
            and deserialisation process.
            </remarks>
            <seealso cref="T:Network.Packets.RequestPacket"/>
            <seealso cref="T:Network.Packets.ResponsePacket"/>
        </member>
        <member name="P:Network.Packets.Packet.ID">
            <summary>
            The ID of the packet. DO NOT CHANGE! This is essential to the packet recognition and handling process.
            </summary>
        </member>
        <member name="P:Network.Packets.Packet.State">
            <summary>
            The transmission state of the packet.
            </summary>
        </member>
        <member name="P:Network.Packets.Packet.Size">
            <summary>
            The size in bytes of the serialised packet.
            </summary>
        </member>
        <member name="P:Network.Packets.Packet.ReceiveTime">
            <summary>
            How long it took to receive the packet, in milliseconds.
            </summary>
            <exception cref="T:System.NotImplementedException">This feature is not currently implemented.</exception>
        </member>
        <member name="M:Network.Packets.Packet.BeforeSend">
            <summary>
            This method is called immediately before serialisation and sending. Use this to convert any properties to serialisable forms.
            </summary>
        </member>
        <member name="M:Network.Packets.Packet.BeforeReceive">
            <summary>
            This method is called immediately after deserialisation and before the packet is handled by the relevant <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/>.
            Use this to convert any properties to their final forms.
            </summary>
        </member>
        <member name="T:Network.Packets.PingRequest">
            <summary>
            Used to perform ping checks between <see cref="T:Network.Connection"/>s.
            </summary>
        </member>
        <member name="T:Network.Packets.PingResponse">
            <summary>
            Response packet for the <see cref="T:Network.Packets.PingRequest"/> packet.
            </summary>
        </member>
        <member name="T:Network.Packets.RawData">
            <summary>
            Sends a raw, primitive value across a network.
            </summary>
        </member>
        <member name="M:Network.Packets.RawData.#ctor(System.String,System.Byte[])">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Network.Packets.RawData"/> packet, with the given key and data.
            </summary>
            <param name="key">The key that <see cref="T:Network.Packets.RawData"/> packet handlers are registered with.</param>
            <param name="data">The serialised primitive value.</param>
        </member>
        <member name="P:Network.Packets.RawData.Key">
            <summary>
            The key both connections are able to register <see cref="T:Network.Packets.RawData"/> packet handlers to.
            </summary>
        </member>
        <member name="P:Network.Packets.RawData.Data">
            <summary>
            The serialised primitive value.
            </summary>
        </member>
        <member name="T:Network.Packets.RequestPacket">
            <summary>
            Represents a request packet.
            </summary>
        </member>
        <member name="T:Network.Packets.ResponsePacket">
            <summary>
            Represents a response to a <see cref="T:Network.Packets.RequestPacket"/>.
            </summary>
            <remarks>For the packet to be handled correctly, the handled <see cref="T:Network.Packets.RequestPacket"/> must be given in the constructor.</remarks>
        </member>
        <member name="M:Network.Packets.ResponsePacket.#ctor(Network.Packets.RequestPacket)">
            <summary>
            Default constructor for a response packet.
            </summary>
            <param name="packet">The <see cref="T:Network.Packets.RequestPacket"/> that is being handled.\\\</param>
        </member>
        <member name="T:Network.Packets.RSA.RSAKeyInformationRequest">
            <summary>
            Requests a RSA public key from the paired <see cref="T:Network.Connection"/>.
            </summary>
            <seealso cref="T:Network.Packets.Packet" />
        </member>
        <member name="M:Network.Packets.RSA.RSAKeyInformationRequest.#ctor(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Network.Packets.RSA.RSAKeyInformationRequest.PublicKey">
            <summary>
            The public RSA key for encryption, decryption and signing.
            </summary>
        </member>
        <member name="P:Network.Packets.RSA.RSAKeyInformationRequest.KeySize">
            <summary>
            The size of the RSA key.
            </summary>
        </member>
        <member name="T:Network.Packets.RSA.RSAKeyInformationResponse">
            <summary>
            Response packet for a <see cref="T:Network.Packets.RSA.RSAKeyInformationRequest"/>.
            </summary>
        </member>
        <member name="M:Network.Packets.RSA.RSAKeyInformationResponse.#ctor(System.String,System.Int32,Network.Packets.RSA.RSAKeyInformationRequest)">
            <inheritdoc />
        </member>
        <member name="P:Network.Packets.RSA.RSAKeyInformationResponse.PublicKey">
            <summary>
            The public RSA key for encryption, decryption and signing.
            </summary>
        </member>
        <member name="P:Network.Packets.RSA.RSAKeyInformationResponse.KeySize">
            <summary>
            The size of the RSA key.
            </summary>
        </member>
        <member name="T:Network.Packets.UDPPingRequest">
            <summary>
            A ping testing packet that functions over UDP.
            </summary>
        </member>
        <member name="T:Network.Packets.UDPPingResponse">
            <summary>
            Response to a <see cref="T:Network.Packets.UDPPingRequest"/> packet.
            </summary>
        </member>
        <member name="M:Network.Packets.UDPPingResponse.#ctor(Network.Packets.UDPPingRequest)">
            <inheritdoc />
        </member>
        <member name="T:Network.RSA.RSAConnection">
            <summary>
            Provides RSA encryption and decryption facilities to a <see cref="T:Network.Connection"/>,
            allowing encrypted communication.
            </summary>
            <seealso cref="T:Network.Interfaces.IRSACapability" />
            <seealso cref="T:Network.Interfaces.IRSAConnection" />
        </member>
        <member name="F:Network.RSA.RSAConnection.remoteRSAKeyPair">
            <summary>
            The <see cref="T:Network.RSA.RSAPair"/> for the remote communication
            partner.
            </summary>
        </member>
        <member name="F:Network.RSA.RSAConnection.encryptionProvider">
            <summary>
            The RSA encryption provider for encrypting packets.
            </summary>
        </member>
        <member name="F:Network.RSA.RSAConnection.isRSACommunicationActive">
            <summary>
            Whether RSA encryption is active on this connection.
            </summary>
        </member>
        <member name="P:Network.RSA.RSAConnection.Connection">
            <summary>
            The underlying <see cref="T:Network.Connection"/> object that allows
            communication across the network.
            </summary>
        </member>
        <member name="P:Network.RSA.RSAConnection.PacketConverter">
            <summary>
            Use your own packetConverter to serialize/deserialze objects.
            Take care that the internal packet structure should still remain the same:
                1. [16bits]  packet type
                2. [32bits]  packet length
                3. [xxbits]  packet serialisedPacket
            The default packetConverter uses reflection to get and set serialisedPacket within objects.
            Using your own packetConverter could result in a higher throughput.
            </summary>
        </member>
        <member name="P:Network.RSA.RSAConnection.RSAPair">
            <summary>
            Gets or sets the RSA pair.
            </summary>
            <value>The RSA pair.</value>
        </member>
        <member name="P:Network.RSA.RSAConnection.XPOrHigher">
            <summary>
            Is this application running on windowsXP or higher?
            </summary>
        </member>
        <member name="P:Network.RSA.RSAConnection.CommunicationPartnerRSAPair">
            <summary>
            Gets or sets the communication partner's RSA pair.
            </summary>
            <value>The communication partner RSA pair.</value>
        </member>
        <member name="P:Network.RSA.RSAConnection.EncryptionProvider">
            <summary>
            Gets or sets the encryption provider.
            </summary>
            <value>The encryption provider.</value>
        </member>
        <member name="P:Network.RSA.RSAConnection.DecryptionProvider">
            <summary>
            Gets or sets the decryption provider.
            </summary>
            <value>The decryption provider.</value>
        </member>
        <member name="P:Network.RSA.RSAConnection.IsRSACommunicationActive">
            <summary>
            Indicates if the RSA en/decryption is active.
            RSA encryption requires some an initialization process,
            thus won't be available instantly after the connection has
            been established. Once [True] (active) it won't toggle.
            </summary>
            <value><c>true</c> if RSA is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Network.RSA.RSAConnection.ExchangePublicKeys">
            <summary>
            Initializes the RSA communication serialisedPacket.
            Sends our information to the communication partner.
            Subscribes to the RSA packet events.
            </summary>
        </member>
        <member name="M:Network.RSA.RSAConnection.DecryptBytes(System.Byte[])">
            <summary>
            Decrypt bytes with the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />
            </summary>
            <param name="bytes">The bytes to decrypt.</param>
            <returns>The decrypted bytes.</returns>
        </member>
        <member name="M:Network.RSA.RSAConnection.EncryptBytes(System.Byte[])">
            <summary>
            Encrypts bytes with the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />
            </summary>
            <param name="bytes">The Bytes to encrypt.</param>
            <returns>The encrypted bytes.</returns>
        </member>
        <member name="M:Network.RSA.RSAConnection.SerialisePacket(Network.Packets.Packet)">
            <summary>
            Serialises the given <see cref="T:Network.Packets.Packet"/>, and encrypts the resulting
            bytes using the private RSA key and the <see cref="P:Network.RSA.RSAConnection.EncryptionProvider"/>.
            </summary>
            <param name="packet">
            The <see cref="T:Network.Packets.Packet"/> object to serialise.
            </param>
            <returns>
            The RSA encrypted bytes that represent the given packet.
            </returns>
        </member>
        <member name="M:Network.RSA.RSAConnection.GetBytes(Network.Packets.Packet)">
            <summary>
            Serialises the given <see cref="T:Network.Packets.Packet"/>, and encrypts the resulting
            bytes using the private RSA key and the <see cref="P:Network.RSA.RSAConnection.EncryptionProvider"/>.
            </summary>
            <param name="packet">
            The <see cref="T:Network.Packets.Packet"/> object to serialise.
            </param>
            <returns>
            The RSA encrypted bytes that represent the given packet.
            </returns>
        </member>
        <member name="M:Network.RSA.RSAConnection.SerialisePacket``1(``0)">
            <summary>
            Serialises the given <see cref="T:Network.Packets.Packet"/>, and encrypts the resulting
            bytes using the private RSA key and the <see cref="P:Network.RSA.RSAConnection.EncryptionProvider"/>.
            </summary>
            <typeparam name="P">
            The type of the packet to serialise.
            </typeparam>
            <param name="packet">
            The <see cref="T:Network.Packets.Packet"/> object to serialise.
            </param>
            <returns>
            The RSA encrypted bytes that represent the given packet.
            </returns>
        </member>
        <member name="M:Network.RSA.RSAConnection.DeserialisePacket(System.Type,System.Byte[])">
            <summary>
            Deserialises the given encrypted bytes into a <see cref="T:Network.Packets.Packet"/>
            of the given type.
            </summary>
            <param name="packetType">
            The type of packet to deserialise the bytes to.
            </param>
            <param name="serialisedPacket">
            The RSA encrypted bytes to deserialise.
            </param>
            <returns>
            The deserialised <see cref="T:Network.Packets.Packet"/> object.
            </returns>
        </member>
        <member name="M:Network.RSA.RSAConnection.GetPacket(System.Type,System.Byte[])">
            <summary>
            Deserialises the given encrypted bytes into a <see cref="T:Network.Packets.Packet"/>
            of the given type.
            </summary>
            <param name="packetType">
            The type of packet to deserialise the bytes to.
            </param>
            <param name="serialisedPacket">
            The RSA encrypted bytes to deserialise.
            </param>
            <returns>
            The deserialised <see cref="T:Network.Packets.Packet"/> object.
            </returns>
        </member>
        <member name="M:Network.RSA.RSAConnection.DeserialisePacket``1(System.Byte[])">
            <summary>
            Deserialises the given encrypted bytes into a <see cref="T:Network.Packets.Packet"/>
            of the given type.
            </summary>
            <typeparam name="P">
            The type of packet to deserialise the bytes to.
            </typeparam>
            <param name="serialisedPacket">
            The RSA encrypted bytes to deserialise.
            </param>
            <returns>
            The deserialised <see cref="T:Network.Packets.Packet"/> object.
            </returns>
        </member>
        <member name="T:Network.RSA.RSAPair">
            <summary>
            Contains RSA communication properties.
            </summary>
        </member>
        <member name="M:Network.RSA.RSAPair.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.RSA.RSAPair"/> class.
            Generate a <see cref="T:Network.RSA.RSAPair" /> with <see cref="T:Network.RSA.RSAKeyGeneration"/>.<see cref="M:Network.RSA.RSAKeyGeneration.Generate(System.Int32)" />
            </summary>
            <param name="publicKey">The public key. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="privateKey">The private key. (https://superdry.apphb.com/tools/online-rsa-key-converter)</param>
            <param name="keySize">Size of the key.</param>
        </member>
        <member name="M:Network.RSA.RSAPair.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.RSA.RSAPair"/> class.
            Used for internal purposes. The communication partner only
            sends us his public key to encrypt.
            </summary>
            <param name="publicKey">The public key.</param>
            <param name="keySize">Size of the key.</param>
        </member>
        <member name="P:Network.RSA.RSAPair.KeySize">
            <summary>
            Gets or sets the size of the key.
            </summary>
            <value>The size of the key.</value>
        </member>
        <member name="P:Network.RSA.RSAPair.Public">
            <summary>
            Gets or sets the public key.
            </summary>
            <value>The public.</value>
        </member>
        <member name="P:Network.RSA.RSAPair.Private">
            <summary>
            Gets or sets the private key.
            </summary>
            <value>The private.</value>
        </member>
        <member name="P:Network.RSA.RSAPair.HasPublicKey">
            <summary>
            Gets a value indicating whether this instance has a public key.
            </summary>
            <value><c>true</c> if this instance has a public key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.RSA.RSAPair.HasPrivateKey">
            <summary>
            Gets a value indicating whether this instance has a private key.
            </summary>
            <value><c>true</c> if this instance has a private key; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Network.RSA.SecureClientConnectionContainer.#ctor(System.String,System.Int32,Network.RSA.RSAPair)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.RSA.SecureClientConnectionContainer"/> class.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <param name="rsaPair">RSA-Pair.</param>
        </member>
        <member name="M:Network.RSA.SecureClientConnectionContainer.#ctor(Network.TcpConnection,Network.UdpConnection,Network.RSA.RSAPair)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.ClientConnectionContainer"/> class.
            </summary>
            <param name="tcpConnection">The TCP connection.</param>
            <param name="udpConnection">The UDP connection.</param>
            <param name="rsaPair">RSA-Pair.</param>
        </member>
        <member name="M:Network.RSA.SecureClientConnectionContainer.CreateTcpConnection">
            <summary>
            Creates a new SecureTcpConnection.
            </summary>
            <returns>A TcpConnection.</returns>
        </member>
        <member name="M:Network.RSA.SecureClientConnectionContainer.CreateUdpConnection">
            <summary>
            Creates a new SecureUdpConnection from the existing SecureTcpConnection.
            </summary>
            <returns>A UdpConnection.</returns>
        </member>
        <member name="T:Network.RSA.SecureServerConnectionContainer">
            <summary>
            Is able to open and close connections to clients in a secure way.
            Handles basic client connection requests and provides useful methods
            to manage the existing connection.
            </summary>
        </member>
        <member name="M:Network.RSA.SecureServerConnectionContainer.#ctor(System.String,System.Int32,Network.RSA.RSAPair,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.RSA.SecureServerConnectionContainer" /> class.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to tcp/udp/bluetooth clients.</param>
        </member>
        <member name="M:Network.RSA.SecureServerConnectionContainer.#ctor(System.Int32,Network.RSA.RSAPair,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.RSA.SecureServerConnectionContainer" /> class.
            </summary>
            <param name="port">The port.</param>
            <param name="rsaPair">RSA-Pair.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
        </member>
        <member name="M:Network.RSA.SecureServerConnectionContainer.CreateTcpConnection(System.Net.Sockets.TcpClient)">
            <summary>
            Instead of a normal TcpConnection, a secure server connection demands a secureTcpConnection.
            </summary>
            <param name="tcpClient">The tcpClient to be wrapped.</param>
            <returns>A <see cref="T:Network.RSA.SecureTcpConnection"/></returns>
        </member>
        <member name="T:Network.RSA.SecureTcpConnection">
            <summary>
            This class contains a tcp connection to the given tcp client.
            It provides convenient methods to send and receive objects with a minimal serialization header.
            Compared to the <see cref="T:Network.TcpConnection"/> the <see cref="T:Network.RSA.SecureTcpConnection"/> does encrypt/decrypt sent/received bytes.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureTcpConnection.PublicKey">
            <summary>
            The PublicKey of this instance.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureTcpConnection.PrivateKey">
            <summary>
            The PrivateKey of this instance.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureTcpConnection.KeySize">
            <summary>
            The used KeySize of this instance.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureTcpConnection.RSAPair">
            <summary>
            Gets the RSA pair.
            </summary>
            <value>The RSA pair.</value>
        </member>
        <member name="P:Network.RSA.SecureTcpConnection.PacketConverter">
            <summary>
            Use your own packetConverter to serialize/deserialze objects.
            Take care that the internal packet structure should still remain the same:
                1. [16bits]  packet type
                2. [32bits]  packet length
                3. [xxbits]  packet data
            The default packetConverter uses reflection to get and set data within objects.
            Using your own packetConverter could result in a higher throughput.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureTcpConnection.RSAConnection">
            <summary>
            A helper object to handle RSA requests.
            </summary>
            <value>The RSA connection.</value>
        </member>
        <member name="M:Network.RSA.SecureTcpConnection.CreateUdpConnection(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Instead of a normal UdpConnection, we create a secure-UdpConnection
            based on the configuration of our secure-TcpConnection. (Sharing private/public key)
            </summary>
            <param name="localEndPoint">The localEndPoint.</param>
            <param name="removeEndPoint">The removeEndPoint to connect to.</param>
            <param name="writeLock">The writeLock.</param>
            <returns>A Secure-UdpConnection.</returns>
        </member>
        <member name="T:Network.RSA.SecureUdpConnection">
            <summary>
            This class contains a udp connection to the given tcp client.
            It provides convenient methods to send and receive objects with a minimal serialization header.
            Compared to the <see cref="T:Network.UdpConnection"/> the <see cref="T:Network.RSA.SecureUdpConnection"/> does encrypt/decrypt sent/received bytes.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureUdpConnection.PublicKey">
            <summary>
            The PublicKey of this instance.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureUdpConnection.PrivateKey">
            <summary>
            The PrivateKey of this instance.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureUdpConnection.KeySize">
            <summary>
            The used KeySize of this instance.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureUdpConnection.RSAPair">
            <summary>
            Gets the RSA pair.
            </summary>
            <value>The RSA pair.</value>
        </member>
        <member name="P:Network.RSA.SecureUdpConnection.PacketConverter">
            <summary>
            Use your own packetConverter to serialize/deserialze objects.
            Take care that the internal packet structure should still remain the same:
                1. [16bits]  packet type
                2. [32bits]  packet length
                3. [xxbits]  packet data
            The default packetConverter uses reflection to get and set data within objects.
            Using your own packetConverter could result in a higher throughput.
            </summary>
        </member>
        <member name="P:Network.RSA.SecureUdpConnection.RSAConnection">
            <summary>
            A helper object to handle RSA requests.
            </summary>
            <value>The RSA connection.</value>
        </member>
        <member name="T:Network.ServerConnectionContainer">
            <summary>
            Is able to open and close connections to clients.
            Handles basic client connection requests and provides useful methods
            to manage the existing connection.
            </summary>
        </member>
        <member name="M:Network.ServerConnectionContainer.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.ServerConnectionContainer" /> class.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to tcp/udp/bluetooth clients.</param>
        </member>
        <member name="M:Network.ServerConnectionContainer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.ServerConnectionContainer" /> class.
            </summary>
            <param name="port">The port.</param>
            <param name="start">if set to <c>true</c> then the instance automatically starts to listen to clients.</param>
        </member>
        <member name="P:Network.ServerConnectionContainer.Item(Network.TcpConnection)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1"/> with the specified TCP connection.
            </summary>
            <param name="tcpConnection">The TCP connection.</param>
            <returns>List&lt;UdpConnection&gt;.</returns>
        </member>
        <member name="P:Network.ServerConnectionContainer.Item(Network.UdpConnection)">
            <summary>
            Gets the <see cref="T:Network.TcpConnection"/> with the specified UDP connection.
            </summary>
            <param name="udpConnection">The UDP connection.</param>
            <returns>TcpConnection.</returns>
        </member>
        <member name="P:Network.ServerConnectionContainer.IsTCPOnline">
            <summary>
            Gets a value indicating whether the tcp server is online or not.
            </summary>
            <value><c>true</c> if this instance is online; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.ServerConnectionContainer.AllowUDPConnections">
            <summary>
            Gets or sets a value indicating whether [allow UDP connections].
            </summary>
            <value><c>true</c> if [allow UDP connections]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.ServerConnectionContainer.UDPConnectionLimit">
            <summary>
            Gets or sets how many UDP connection are accepted. If the client requests another
            udp connection which exceeds this limit, the TCP connection and all the UDP connections will be closed.
            </summary>
        </member>
        <member name="P:Network.ServerConnectionContainer.IsBluetoothOnline">
            <summary>
            Gets a value indicating whether the bluetooth server is online or not.
            </summary>
        </member>
        <member name="P:Network.ServerConnectionContainer.AllowBluetoothConnections">
            <summary>
            Gets or sets if the server is listening to bluetooth connections.
            Existing bluetooth connections wont be closed if you toggle this property.
            The server wont start or stop if you toggle this value.
            </summary>
        </member>
        <member name="P:Network.ServerConnectionContainer.MaxBluetoothPendingQueue">
            <summary>
            The maximum amount of pending bluetooth connections.
            </summary>
        </member>
        <member name="P:Network.ServerConnectionContainer.TCP_Connections">
            <summary>
            Gets all the connected TCP connections.
            </summary>
            <value>The tc p_ connections.</value>
        </member>
        <member name="P:Network.ServerConnectionContainer.UDP_Connections">
            <summary>
            Gets all the connected UDP connections.
            </summary>
            <value>The ud p_ connections.</value>
        </member>
        <member name="P:Network.ServerConnectionContainer.BLUETOOTH_Connections">
            <summary>
            Gets all the connected BLUETOOTH connections.
            </summary>
        </member>
        <member name="P:Network.ServerConnectionContainer.Count">
            <summary>
            Gets the connection count. (Clients)
            </summary>
        </member>
        <member name="E:Network.ServerConnectionContainer.ConnectionLost">
            <summary>
            Occurs when [connection closed]. This action will be called if a TCP or an UDP has been closed.
            If a TCP connection has been closed, all its attached UDP connections are lost as well.
            If a UDP connection has been closed, the attached TCP connection may still be alive.
            </summary>
        </member>
        <member name="E:Network.ServerConnectionContainer.ConnectionEstablished">
            <summary>
            Occurs when a TCP or an UDP connection has been established.
            </summary>
        </member>
        <member name="M:Network.ServerConnectionContainer.Start">
            <summary>
            Starts to listen to tcp and bluetooth clients.
            </summary>
        </member>
        <member name="M:Network.ServerConnectionContainer.StartTCPListener">
            <summary>
            Starts to listen to the given port and ipAddress.
            </summary>
        </member>
        <member name="M:Network.ServerConnectionContainer.StartBluetoothListener">
            <summary>
            Starts to listen to available bluetooth connections.
            </summary>
        </member>
        <member name="M:Network.ServerConnectionContainer.udpConnectionReceived(Network.TcpConnection,Network.UdpConnection)">
            <summary>
            A UDP connection has been established.
            </summary>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.ServerConnectionContainer.connectionClosed(Network.Enums.CloseReason,Network.Connection)">
            <summary>
            TCPs the or UDP connection closed.
            </summary>
            <param name="closeReason">The close reason.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Network.ServerConnectionContainer.StopBluetoothListener">
            <summary>
            Stops the Bluetooth listener. No new bluetooth clients are able to connect to the server anymore.
            </summary>
        </member>
        <member name="M:Network.ServerConnectionContainer.StopTCPListener">
            <summary>
            Stops the TCP listener. No new tcp clients are able to connect to the server anymore.
            </summary>
        </member>
        <member name="M:Network.ServerConnectionContainer.Stop">
            <summary>
            Stops listening to bluetooth and tcp clients.
            </summary>
        </member>
        <member name="M:Network.ServerConnectionContainer.CloseConnections(Network.Enums.CloseReason)">
            <summary>
            Closes all the tcp and udp connections.
            </summary>
        </member>
        <member name="M:Network.ServerConnectionContainer.CloseTCPConnections(Network.Enums.CloseReason)">
            <summary>
            Closes all the tcp connections.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Network.ServerConnectionContainer.CloseUDPConnections(Network.Enums.CloseReason)">
            <summary>
            Closes all the udp connections.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Network.ServerConnectionContainer.CloseBluetoothConnections(Network.Enums.CloseReason)">
            <summary>
            Closes all the bluetooth connections.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Network.ServerConnectionContainer.TCP_BroadCast(Network.Packets.Packet)">
            <summary>
            Sends a broadcast to all the connected tcp connections.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Network.ServerConnectionContainer.UDP_BroadCast(Network.Packets.Packet)">
            <summary>
            Sends a broadcast to all the connected udp connections.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Network.ServerConnectionContainer.BLUETOOTH_BroadCast(Network.Packets.Packet)">
            <summary>
            Sends a broadcast to all the connected bluetooth connections.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Network.ServerConnectionContainer.CreateTcpConnection(System.Net.Sockets.TcpClient)">
            <summary>
            Creates a new TcpConnection instance.
            </summary>
            <param name="tcpClient">The TcpClient to connect to.</param>
            <returns>A <see cref="T:Network.TcpConnection" /> object.</returns>
        </member>
        <member name="T:Network.TcpConnection">
            <summary>
            This class contains a tcp connection to the given tcp client.
            It provides convenient methods to send and receive objects with a minimal serialization header.
            </summary>
        </member>
        <member name="M:Network.TcpConnection.#ctor(System.Net.Sockets.TcpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.TcpConnection"/> class.
            </summary>
            <param name="tcpClient">The TCP client.</param>
        </member>
        <member name="P:Network.TcpConnection.TTL">
            <summary>
            Gets or sets the time to live for the tcp connection.
            </summary>
            <value>The TTL.</value>
        </member>
        <member name="P:Network.TcpConnection.DualMode">
            <summary>
            Gets or sets a value indicating whether [dual mode]. (Ipv6 + Ipv4)
            </summary>
            <value><c>true</c> if [dual mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.TcpConnection.Fragment">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Network.TcpConnection"/> is allowed to fragment the frames.
            </summary>
            <value><c>true</c> if fragment; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.TcpConnection.HopLimit">
            <summary>
            The hop limit. This is compareable to the Ipv4 TTL.
            </summary>
        </member>
        <member name="P:Network.TcpConnection.NoDelay">
            <summary>
            Gets or sets if the packet should be send with or without any delay.
            If disabled, no data will be buffered at all and sent immediately to it's destination.
            There is no guarantee that the network performance will be increased.
            </summary>
        </member>
        <member name="P:Network.TcpConnection.UseLoopback">
            <summary>
            Gets or sets if it should bypass hardware.
            </summary>
        </member>
        <member name="P:Network.TcpConnection.IsRoutingEnabled">
            <summary>
            Gets or sets if the packet should be sent directly to its destination or not.
            </summary>
        </member>
        <member name="P:Network.TcpConnection.LocalEndPoint">
            <summary>
            Gets the local end point.
            </summary>
            <value>The local end point.</value>
        </member>
        <member name="P:Network.TcpConnection.RemoteEndPoint">
            <summary>
            Gets the remote end point.
            </summary>
            <value>The remote end point.</value>
        </member>
        <member name="M:Network.TcpConnection.EstablishUdpConnection(System.Action{System.Net.IPEndPoint,System.Net.IPEndPoint})">
            <summary>
            Establishes a udp connection.
            </summary>
            <returns>The EndPoint of the udp connection.</returns>
        </member>
        <member name="M:Network.TcpConnection.ReadBytes(System.Int32)">
            <summary>
            Reads bytes from the stream.
            </summary>
            <param name="amount">The amount of bytes we want to read.</param>
            <returns>The read bytes.</returns>
        </member>
        <member name="M:Network.TcpConnection.WriteBytes(System.Byte[])">
            <summary>
            Writes bytes to the stream.
            </summary>
            <param name="bytes">The bytes to write.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.TcpConnection.CloseHandler(Network.Enums.CloseReason)">
            <summary>
            Handles if the connection should be closed, based on the reason.
            </summary>
            <param name="closeReason">The close reason.</param>
        </member>
        <member name="M:Network.TcpConnection.HandleUnknownPacket">
            <summary>
            Handles the case if we receive an unknown packet.
            This is not possible for the TCP connection, theoretically.
            </summary>
        </member>
        <member name="P:Network.TcpConnection.LocalIPEndPoint">
            <summary>
            Gets the ip address's local endpoint of this connection.
            </summary>
            <value>The ip end point.</value>
        </member>
        <member name="P:Network.TcpConnection.RemoteIPEndPoint">
            <summary>
            Gets the ip address's remote endpoint of this connection.
            </summary>
            <value>The ip end point.</value>
        </member>
        <member name="M:Network.TcpConnection.CloseSocket">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:Network.UdpConnection">
            <summary>
            This class contains a udp connection to the given udp client.
            It provides convenient methods to send and receive objects with a minimal serialization header.
            </summary>
        </member>
        <member name="F:Network.UdpConnection.rttStopWatch">
            <summary>
            Stopwatch to measure the RTT.
            </summary>
        </member>
        <member name="F:Network.UdpConnection.receivedBytes">
            <summary>
            The received data cache.
            </summary>
        </member>
        <member name="M:Network.UdpConnection.#ctor(System.Net.Sockets.UdpClient,System.Net.IPEndPoint,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Network.UdpConnection"/> class.
            </summary>
            <param name="udpClient">The UDP client.</param>
            <param name="endPoint">The endPoint where we want to receive the data.</param>
        </member>
        <member name="P:Network.UdpConnection.TTL">
            <summary>
            Gets or sets the time to live for the tcp connection.
            </summary>
            <value>The TTL.</value>
        </member>
        <member name="P:Network.UdpConnection.DualMode">
            <summary>
            Gets or sets a value indicating whether [dual mode]. (Ipv6 + Ipv4)
            </summary>
            <value><c>true</c> if [dual mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.UdpConnection.Fragment">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Network.UdpConnection"/> is allowed to fragment the frames.
            </summary>
            <value><c>true</c> if fragment; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Network.UdpConnection.IsChecksumEnabled">
            <summary>
            Gets or sets if a UDP packet checksum should be created.
            </summary>
        </member>
        <member name="P:Network.UdpConnection.HopLimit">
            <summary>
            The hop limit. This is compareable to the Ipv4 TTL.
            </summary>
        </member>
        <member name="P:Network.UdpConnection.NoDelay">
            <summary>
            Gets or sets if the packet should be send with or without any delay.
            If disabled, no data will be buffered at all and sent immediately to it's destination.
            There is no guarantee that the network performance will be increased.
            </summary>
        </member>
        <member name="P:Network.UdpConnection.UseLoopback">
            <summary>
            Gets or sets if it should bypass hardware.
            </summary>
        </member>
        <member name="P:Network.UdpConnection.IsRoutingEnabled">
            <summary>
            Gets or sets if the packet should be sent directly to its destination or not.
            </summary>
        </member>
        <member name="P:Network.UdpConnection.AcknowledgePending">
            <summary>
            Gets or sets a value indicating whether [write lock].
            </summary>
            <value><c>true</c> if [write lock]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Network.UdpConnection.MeasureRTT">
            <summary>
            Measures the RTT of the UDP connection.
            Receiving a result
            </summary>
            <param name="rttResult">The RTT result.</param>
        </member>
        <member name="M:Network.UdpConnection.UDPPingResponse(Network.Packets.UDPPingResponse,Network.Connection)">
            <summary>
            We received a UDP RTT request response.
            </summary>
            <param name="response">The response.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Network.UdpConnection.ReadBytes(System.Int32)">
            <summary>
            Reads bytes from the stream.
            </summary>
            <param name="amount">The amount of bytes we want to read.</param>
            <returns>The read bytes.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.UdpConnection.WriteBytes(System.Byte[])">
            <summary>
            Writes bytes to the stream.
            </summary>
            <param name="bytes">The bytes to write.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.UdpConnection.CloseHandler(Network.Enums.CloseReason)">
            <summary>
            Handles if the connection should be closed, based on the reason.
            </summary>
            <param name="closeReason">The close reason.</param>
        </member>
        <member name="M:Network.UdpConnection.HandleUnknownPacket">
            <summary>
            Handles the case if we receive an unknown packet.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Network.UdpConnection.ObjectMapRefreshed">
            <summary>
            The packetHandlerMap has been refreshed.
            </summary>
        </member>
        <member name="P:Network.UdpConnection.LocalIPEndPoint">
            <summary>
            Gets the ip address's local endpoint of this connection.
            </summary>
            <value>The ip end point.</value>
        </member>
        <member name="P:Network.UdpConnection.RemoteIPEndPoint">
            <summary>
            Gets the ip address's remote endpoint of this connection.
            </summary>
            <value>The ip end point.</value>
        </member>
        <member name="M:Network.UdpConnection.CloseSocket">
            <summary>
            Closes the socket.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Network.Utilities.BiDictionary`2">
            <summary>
            Provides a dictionary capable of looking up both a key or a value. Otherwise
            it is the same as a regular dictionary. See https://en.wikipedia.org/wiki/Hash_table
            for a better explanation of the concepts behind the dictionary.
            </summary>
            <typeparam name="TKey">
            The type of the key stored in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of the value stored in the dictionary.
            </typeparam>
        </member>
        <member name="F:Network.Utilities.BiDictionary`2.dictionary">
            <summary>
            The internal dictionary, storing the keys and values for the
            bi-directional dictionary.
            </summary>
        </member>
        <member name="P:Network.Utilities.BiDictionary`2.Keys">
            <summary>
            The keys held in the dictionary.
            </summary>
        </member>
        <member name="P:Network.Utilities.BiDictionary`2.Values">
            <summary>
            The values held in the dictionary.
            </summary>
        </member>
        <member name="M:Network.Utilities.BiDictionary`2.#ctor">
            <summary>
            Constructs an empty dictionary.
            </summary>
        </member>
        <member name="M:Network.Utilities.BiDictionary`2.ContainsKey(`0)">
            <summary>
            Checks whether or not the dictionary contains the given key.
            </summary>
            <param name="key">
            The key to check for.
            </param>
            <returns>
            Whether or not the key exists.
            </returns>
        </member>
        <member name="M:Network.Utilities.BiDictionary`2.ContainsValue(`1)">
            <summary>
            Checks whether or not the dictionary contains the given value.
            </summary>
            <param name="value">
            The value to check for.
            </param>
            <returns>
            Whether or not the value exists.
            </returns>
        </member>
        <member name="M:Network.Utilities.BiDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with the given key, returning
            'true' if a value was found, or 'false' if it wasn't.
            </summary>
            <param name="key">
            The key for whose value to search.
            </param>
            <param name="value">
            The value, if it was found. Otherwise the default for its type.
            </param>
            <returns>
            Whether or not the given key had a value.
            </returns>
        </member>
        <member name="M:Network.Utilities.BiDictionary`2.TrySetValue(`0,`1)">
            <summary>
            Tries to set the value associated with the given key, returning
            'true' if the value was set correctly, or 'false' if it wasn't.
            </summary>
            <param name="key">
            The key whose value to set.
            </param>
            <param name="value">
            The value to set for the given key.
            </param>
            <returns>
            Whether or not the given key was set to the given value.
            </returns>
        </member>
        <member name="M:Network.Utilities.BiDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            Tries to get the key associated with the given value, returning
            'true' if a value was found, or 'false' if it wasn't.
            </summary>
            <param name="value">
            The value for whose key to search.
            </param>
            <param name="key">
            The key, if it was found. Otherwise the default for its type.
            </param>
            <returns>
            Whether or not the given value had a key.
            </returns>
        </member>
        <member name="M:Network.Utilities.BiDictionary`2.TrySetKey(`1,`0)">
            <summary>
            Tries to set the key associated with the given value, returning
            'true' if the key was set correctly, or 'false' if it wasn't.
            </summary>
            <param name="key">
            The value whose key to set.
            </param>
            <param name="value">
            The key to set for the given value.
            </param>
            <returns>
            Whether or not the given value had its key set to the given key.
            </returns>
        </member>
        <member name="P:Network.Utilities.BiDictionary`2.Item(`0)">
            <summary>
            Allows for the getting and setting of a value via its key.
            </summary>
            <param name="key_">
            The key whose value to get or set.
            </param>
            <returns>
            The value of the specified key.
            </returns>
        </member>
        <member name="P:Network.Utilities.BiDictionary`2.Item(`1)">
            <summary>
            Allows for the getting and setting of a key via its value.
            </summary>
            <param name="value_">
            The value whose key to get or set.
            </param>
            <returns>
            The key of the specified value.
            </returns>
        </member>
        <member name="T:Network.Utilities.PacketHandlerMap">
            <summary>
            Maps individual <see cref="T:Network.Packets.Packet"/>s to their unique ID value, so that
            they can be sent across the network and then deserialised. Also maps the
            <see cref="T:Network.Packets.Packet"/>s IDs to the relevant <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/>,
            should one be registered for that packet.
            </summary>
        </member>
        <member name="F:Network.Utilities.PacketHandlerMap.packetTypeToHandlerIdMap">
            <summary>
            Maps each packet type to a dictionary containing registered objects
            which want to receive packets (i.e. Handlers) of the given type and
            their individual IDs.
            </summary>
        </member>
        <member name="F:Network.Utilities.PacketHandlerMap.packetIdToDelegateMethodMap">
            <summary>
            Maps each packet id to a tuple, holding the packet handler method
            and the object on which the handler should be called.
            </summary>
        </member>
        <member name="F:Network.Utilities.PacketHandlerMap.keyToDelegateMethodMap">
            <summary>
            Maps a <see cref="T:System.String"/> key to a <see cref="T:Network.Packets.RawData"/> packet
            handler delegate method.
            </summary>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.HasRegisteredHandler(Network.Packets.Packet)">
            <summary>
            Checks whether the given packet has a registered handler method.
            </summary>
            <param name="packet">
            The packet for which to search for handler delegate methods.
            </param>
            <returns>
            Whether any delegate methods have been registered for the packet.
            </returns>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.Restore(Network.Utilities.PacketHandlerMap)">
            <summary>
            Restores the <see cref="T:Network.Utilities.PacketHandlerMap"/> to the state of the
            given packet handler map.
            </summary>
            <param name="map">
            The <see cref="T:Network.Utilities.PacketHandlerMap"/> whose state to restore to.
            </param>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.RegisterPacketHandler``1(System.Delegate,System.Object)">
            <summary>
            Registers the given delegate method to be used for the given packet
            type.
            </summary>
            <typeparam name="P">
            The type of packet for which the delegate method will be used.
            </typeparam>
            <param name="handlerDelegate">
            The delegate method to be invoked when the given packet is received.
            </param>
            <param name="handlerInstance">
            The handler object instance on which the delegate method will be invoked.
            </param>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.RegisterPacketDelegate``1(Network.Interfaces.PacketReceivedHandler{``0},System.Object)">
            <summary>
            Registers the given <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/> method
            to be used for the given packet type.
            </summary>
            <typeparam name="P">
            The type of packet for which the delegate method will be used.
            </typeparam>
            <param name="handlerDelegate">
            The delegate method to be invoked when the given packet is received.
            </param>
            <param name="handlerInstance">
            The handler object instance on which the delegate method will be invoked.
            </param>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.RegisterStaticPacketHandler``1(System.Delegate)">
            <summary>
            Registers the given static delegate method to be used for all
            packets of the given packet type.
            </summary>
            <typeparam name="P">
            The type of packet for which the delegate method will be used.
            </typeparam>
            <param name="handlerDelegate">
            The static delegate method to be invoked when the given packet is
            received.
            </param>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.RegisterStaticPacketHandler``1(Network.Interfaces.PacketReceivedHandler{``0})">
            <summary>
            Registers the given <see cref="T:Network.Interfaces.PacketReceivedHandler`1"/> method
            to be used for all packets of the given packet type.
            </summary>
            <typeparam name="P">
            The type of packet for which the delegate method will be used.
            </typeparam>
            <param name="handlerDelegate">
            The static delegate method to be invoked when the given packet is
            received.
            </param>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.RegisterStaticRawDataHandler(System.String,System.Delegate)">
            <summary>
            Registers the given <see cref="T:System.Delegate"/> method to be used for
            all <see cref="T:Network.Packets.RawData"/> packets that arrive with the given key.
            </summary>
            <param name="key">
            The key that identifies the primitive type.
            </param>
            <param name="handlerDelegate">
            The delegate method to invoke for incoming <see cref="T:Network.Packets.RawData"/>
            packets with the given key.
            </param>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.DeregisterPacketHandler``1(System.Object)">
            <summary>
            Deregisters packet handlers for the given packet type, on the given
            packet handler instance.
            </summary>
            <typeparam name="P">
            The type of packet for which to deregister any packet handlers.
            </typeparam>
            <param name="handlerInstance">
            The handler instance for which to deregisters packet handlers.
            </param>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.DeregisterStaticPacketHandler``1">
            <summary>
            Deregisters all static packet handlers for the given packet type.
            </summary>
            <typeparam name="P">
            The packet type for which to deregister all packet handlers.
            </typeparam>
        </member>
        <member name="M:Network.Utilities.PacketHandlerMap.DeregisterStaticRawDataHandler(System.String)">
            <summary>
            Deregisters all static <see cref="T:Network.Packets.RawData"/> packet handlers for
            the given key.
            </summary>
            <param name="key">
            The key for which to deregister packet handlers.
            </param>
        </member>
        <member name="P:Network.Utilities.PacketHandlerMap.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Delegate"/> method which handles <see cref="T:Network.Packets.RawData"/>
            packets for the primitive type identified by the given key.
            </summary>
            <param name="key">
            The key for whose primitive type to get a handler delegate.
            </param>
            <returns>
            The handler delegate associated with the given key.
            </returns>
        </member>
        <member name="P:Network.Utilities.PacketHandlerMap.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Delegate"/> method which handles packets with
            the given ID.
            </summary>
            <param name="packetID">
            The ID of the packet whose handler delegate to return.
            </param>
            <returns>
            The handler delegate associated with packets of the given id.
            </returns>
        </member>
        <member name="P:Network.Utilities.PacketHandlerMap.Item(System.Type)">
            <summary>
            Gets the <see cref="T:System.Delegate"/> method which handles packets of
            the given <see cref="T:System.Type"/>.
            </summary>
            <param name="packetType">
            The type of packet whose handler delegate to return.
            </param>
            <returns>
            The handler delegate registered for the given type.
            </returns>
        </member>
        <member name="P:Network.Utilities.PacketHandlerMap.Item(System.Type,System.Object)">
            <summary>
            Gets the ID associated with the given packet type and handler
            instance.
            </summary>
            <param name="packetType">
            The packet type whose handler ID to return.
            </param>
            <param name="handlerInstance">
            The handler whose ID to return.
            </param>
            <returns>
            The ID associated with the given handler of the given packet type.
            </returns>
        </member>
        <member name="T:Network.Utilities.UidGenerator">
            <summary>
            Provides methods for the generation of unique identifiers for objects.
            </summary>
        </member>
        <member name="F:Network.Utilities.UidGenerator.typeToIdMap">
            <summary>
            Maps a <see cref="T:System.Type"/> to its cached, unique ID via a thread-safe
            dictionary.
            </summary>
        </member>
        <member name="M:Network.Utilities.UidGenerator.GenerateUid``1">
            <summary>
            Generates a unique identifier for the given
            </summary>
            <typeparam name="T">
            The type for which to generate a unique ID.
            </typeparam>
            <returns>
            The unique ID.
            </returns>
        </member>
        <member name="M:Network.Utilities.UidGenerator.LastGeneratedUid``1">
            <summary>
            Returns the unique identifier associated with the given type.
            </summary>
            <typeparam name="T">
            The type whose ID to get.
            </typeparam>
            <returns>
            The unique ID.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if the method is called before an ID is present. This occurs
            if a previous call to <see cref="M:Network.Utilities.UidGenerator.GenerateUid``1"/> was not made
            for the given type, and thus no ID actually exists.
            </exception>
        </member>
    </members>
</doc>
